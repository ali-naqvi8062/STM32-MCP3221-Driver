
stm32f1xx_MCP3221.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003ebc  08003ebc  00004ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f54  08003f54  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003f54  08003f54  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f54  08003f54  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f54  08003f54  00004f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f58  08003f58  00004f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003f5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  20000068  08003fc4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003fc4  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a054  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001937  00000000  00000000  0000f0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00010a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000798  00000000  00000000  000113e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ef7  00000000  00000000  00011b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c832  00000000  00000000  00029a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008645f  00000000  00000000  000362a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d4  00000000  00000000  000bc74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000bf820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08003ea4 	.word	0x08003ea4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08003ea4 	.word	0x08003ea4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	@ 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a2a:	2afd      	cmp	r2, #253	@ 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	@ 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	@ 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	@ 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <MCP3221_readADC>:
        return HAL_ERROR;
    }
    return HAL_OK;
}

uint16_t MCP3221_readADC(MCP3221 *dev){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	6078      	str	r0, [r7, #4]
    uint8_t data[2];  // data [0] is the upper byte which will have its first 4 bits masked as per VIPER spec
    uint16_t adc_value = 0; // value to return (will be 12 bits)
 8000c80:	2300      	movs	r3, #0
 8000c82:	81fb      	strh	r3, [r7, #14]
    /*
     * I2C call: The second argument follows the project spec where the last address bit is set to 1 by first
     * left shifting the 7 bit i2c address. For example if i2c address is 8'b01001101 then the operation will
     * First left shift (8'10011010) and then or it with 0x01 making the LSB into 1 indicating a read operation.
    */
    if (HAL_I2C_Master_Receive(dev->hi2c, (dev->i2c_Addr << 1) | 1, data, 2, HAL_MAX_DELAY) != HAL_OK){
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6818      	ldr	r0, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	791b      	ldrb	r3, [r3, #4]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	b299      	uxth	r1, r3
 8000c98:	f107 020c 	add.w	r2, r7, #12
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f001 f824 	bl	8001cf0 <HAL_I2C_Master_Receive>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <MCP3221_readADC+0x3c>
        return 0xFFFF; // error
 8000cae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cb2:	e00b      	b.n	8000ccc <MCP3221_readADC+0x54>
    }
    /*
     * Mask off the upper 4 bits of the upper byte, data[0].
     * Then shift and concatenate with lower byte
    */
    adc_value = ((data[0] & 0x0F) << 8) | data[1];
 8000cb4:	7b3b      	ldrb	r3, [r7, #12]
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000cbe:	b21a      	sxth	r2, r3
 8000cc0:	7b7b      	ldrb	r3, [r7, #13]
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	81fb      	strh	r3, [r7, #14]

    return adc_value;
 8000cca:	89fb      	ldrh	r3, [r7, #14]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <MCP3221_getADCVoltage>:

float MCP3221_getADCVoltage(uint16_t adc_value){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]

	/*
	 * Voltage = ( ADC value / resolution ) * Reference(or input) Voltage
	*/

    float voltage = ((float)adc_value / MCP3221_RESOLUTION) * MCP3221_VREF_MV;
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fe21 	bl	8000928 <__aeabi_ui2f>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4907      	ldr	r1, [pc, #28]	@ (8000d08 <MCP3221_getADCVoltage+0x34>)
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ff28 	bl	8000b40 <__aeabi_fdiv>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	4906      	ldr	r1, [pc, #24]	@ (8000d0c <MCP3221_getADCVoltage+0x38>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fe6f 	bl	80009d8 <__aeabi_fmul>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60fb      	str	r3, [r7, #12]
    return voltage;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	457ff000 	.word	0x457ff000
 8000d0c:	454e4000 	.word	0x454e4000

08000d10 <MCP3221_getInputVoltage>:

float MCP3221_getInputVoltage(uint16_t adc_value){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]

	// Get voltage (V_ADC)
    float v_adc_mv = MCP3221_getADCVoltage(adc_value);
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ffd9 	bl	8000cd4 <MCP3221_getADCVoltage>
 8000d22:	6178      	str	r0, [r7, #20]

    // Convert mV to volts
    float v_adc_v = v_adc_mv / 1000.0;
 8000d24:	4910      	ldr	r1, [pc, #64]	@ (8000d68 <MCP3221_getInputVoltage+0x58>)
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff0a 	bl	8000b40 <__aeabi_fdiv>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	613b      	str	r3, [r7, #16]

    /*
     * Apply the resistor voltage divider scaling factor (p.22 project spec)
     * to calculate V_BAT.
    */
    float v_bat = v_adc_v * 17.6; //17.6 is the computed voltage divider scaling factor as per proj spec.
 8000d30:	6938      	ldr	r0, [r7, #16]
 8000d32:	f7ff fc9b 	bl	800066c <__aeabi_f2d>
 8000d36:	a30a      	add	r3, pc, #40	@ (adr r3, 8000d60 <MCP3221_getInputVoltage+0x50>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff fa08 	bl	8000150 <__aeabi_dmul>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fce8 	bl	800071c <__aeabi_d2f>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60fb      	str	r3, [r7, #12]

    return v_bat;
 8000d50:	68fb      	ldr	r3, [r7, #12]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	f3af 8000 	nop.w
 8000d60:	9999999a 	.word	0x9999999a
 8000d64:	40319999 	.word	0x40319999
 8000d68:	447a0000 	.word	0x447a0000

08000d6c <MCP3221_getInputCurrent>:

float MCP3221_getInputCurrent(uint16_t adc_value, float sense_res){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	80fb      	strh	r3, [r7, #6]

	// Get voltage (V_ADC)
    float v_adc_mv = MCP3221_getADCVoltage(adc_value);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ffaa 	bl	8000cd4 <MCP3221_getADCVoltage>
 8000d80:	6178      	str	r0, [r7, #20]

    // Convert mV to volts
    float v_adc_v = v_adc_mv / 1000.0;
 8000d82:	490b      	ldr	r1, [pc, #44]	@ (8000db0 <MCP3221_getInputCurrent+0x44>)
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f7ff fedb 	bl	8000b40 <__aeabi_fdiv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	613b      	str	r3, [r7, #16]

    float v_sns = v_adc_v / 40.0; // divisor is 40 according to the project spec (p.25)
 8000d8e:	4909      	ldr	r1, [pc, #36]	@ (8000db4 <MCP3221_getInputCurrent+0x48>)
 8000d90:	6938      	ldr	r0, [r7, #16]
 8000d92:	f7ff fed5 	bl	8000b40 <__aeabi_fdiv>
 8000d96:	4603      	mov	r3, r0
 8000d98:	60fb      	str	r3, [r7, #12]

    float input_current = v_sns / sense_res; // sense res will be different based on high/low power card
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	68f8      	ldr	r0, [r7, #12]
 8000d9e:	f7ff fecf 	bl	8000b40 <__aeabi_fdiv>
 8000da2:	4603      	mov	r3, r0
 8000da4:	60bb      	str	r3, [r7, #8]

    return input_current;
 8000da6:	68bb      	ldr	r3, [r7, #8]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	447a0000 	.word	0x447a0000
 8000db4:	42200000 	.word	0x42200000

08000db8 <main>:
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
void MCP3221_TestFunction(void);

int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  HAL_Init();
 8000dbc:	f000 fb02 	bl	80013c4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000dc0:	f000 f844 	bl	8000e4c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc4:	f000 f8dc 	bl	8000f80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dc8:	f000 f8b0 	bl	8000f2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000dcc:	f000 f880 	bl	8000ed0 <MX_I2C1_Init>

  /* Infinite loop */
  while (1)
  {
      MCP3221_TestFunction();
 8000dd0:	f000 f806 	bl	8000de0 <MCP3221_TestFunction>
      HAL_Delay(1000);
 8000dd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd8:	f000 fb56 	bl	8001488 <HAL_Delay>
      MCP3221_TestFunction();
 8000ddc:	bf00      	nop
 8000dde:	e7f7      	b.n	8000dd0 <main+0x18>

08000de0 <MCP3221_TestFunction>:
  }
}

void MCP3221_TestFunction(void) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
    uint16_t adc_value;
    float input_voltage, input_current;

    // Read raw ADC value from MCP3221
    adc_value = MCP3221_readADC(&mcp3221_device);
 8000de6:	4815      	ldr	r0, [pc, #84]	@ (8000e3c <MCP3221_TestFunction+0x5c>)
 8000de8:	f7ff ff46 	bl	8000c78 <MCP3221_readADC>
 8000dec:	4603      	mov	r3, r0
 8000dee:	81fb      	strh	r3, [r7, #14]
    if (adc_value == 0xFFFF) {
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <MCP3221_TestFunction+0x1e>
        // Error reading ADC, handle accordingly
        Error_Handler();
 8000dfa:	f000 f92f 	bl	800105c <Error_Handler>
    }

    // Calculate and print the input voltage
    input_voltage = MCP3221_getInputVoltage(adc_value);
 8000dfe:	89fb      	ldrh	r3, [r7, #14]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff85 	bl	8000d10 <MCP3221_getInputVoltage>
 8000e06:	60b8      	str	r0, [r7, #8]
    printf("Input Voltage (V_BAT): %.2f V\n", input_voltage);
 8000e08:	68b8      	ldr	r0, [r7, #8]
 8000e0a:	f7ff fc2f 	bl	800066c <__aeabi_f2d>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	480b      	ldr	r0, [pc, #44]	@ (8000e40 <MCP3221_TestFunction+0x60>)
 8000e14:	f002 f9ce 	bl	80031b4 <iprintf>

    // Select the appropriate sense resistor based on card type (example: high-power card)
    input_current = MCP3221_getInputCurrent(adc_value, SENSE_RES_HIGH_POWER);
 8000e18:	89fb      	ldrh	r3, [r7, #14]
 8000e1a:	490a      	ldr	r1, [pc, #40]	@ (8000e44 <MCP3221_TestFunction+0x64>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ffa5 	bl	8000d6c <MCP3221_getInputCurrent>
 8000e22:	6078      	str	r0, [r7, #4]
    printf("Input Current: %.2f A\n", input_current);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff fc21 	bl	800066c <__aeabi_f2d>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4806      	ldr	r0, [pc, #24]	@ (8000e48 <MCP3221_TestFunction+0x68>)
 8000e30:	f002 f9c0 	bl	80031b4 <iprintf>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000120 	.word	0x20000120
 8000e40:	08003ebc 	.word	0x08003ebc
 8000e44:	3a83126f 	.word	0x3a83126f
 8000e48:	08003edc 	.word	0x08003edc

08000e4c <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b090      	sub	sp, #64	@ 0x40
 8000e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	2228      	movs	r2, #40	@ 0x28
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 f9ff 	bl	800325e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e72:	2301      	movs	r3, #1
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e76:	2310      	movs	r3, #16
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e82:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 0318 	add.w	r3, r7, #24
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 fbe1 	bl	8002654 <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e98:	f000 f8e0 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fe4e 	bl	8002b58 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ec2:	f000 f8cb 	bl	800105c <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3740      	adds	r7, #64	@ 0x40
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000ed6:	4a13      	ldr	r2, [pc, #76]	@ (8000f24 <MX_I2C1_Init+0x54>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000edc:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <MX_I2C1_Init+0x58>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000eee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <MX_I2C1_Init+0x50>)
 8000f0e:	f000 fdab 	bl	8001a68 <HAL_I2C_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f18:	f000 f8a0 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000084 	.word	0x20000084
 8000f24:	40005400 	.word	0x40005400
 8000f28:	000186a0 	.word	0x000186a0

08000f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	@ (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	220c      	movs	r2, #12
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f001 ff86 	bl	8002e74 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f875 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000d8 	.word	0x200000d8
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a2c      	ldr	r2, [pc, #176]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fac:	4b27      	ldr	r3, [pc, #156]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a26      	ldr	r2, [pc, #152]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fb2:	f043 0320 	orr.w	r3, r3, #32
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0320 	and.w	r3, r3, #32
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a20      	ldr	r2, [pc, #128]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fe2:	f043 0308 	orr.w	r3, r3, #8
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_GPIO_Init+0xcc>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2120      	movs	r1, #32
 8000ff8:	4815      	ldr	r0, [pc, #84]	@ (8001050 <MX_GPIO_Init+0xd0>)
 8000ffa:	f000 fcfb 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ffe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_GPIO_Init+0xd4>)
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	4811      	ldr	r0, [pc, #68]	@ (8001058 <MX_GPIO_Init+0xd8>)
 8001014:	f000 fb6a 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001018:	2320      	movs	r3, #32
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2302      	movs	r3, #2
 8001026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	4808      	ldr	r0, [pc, #32]	@ (8001050 <MX_GPIO_Init+0xd0>)
 8001030:	f000 fb5c 	bl	80016ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2028      	movs	r0, #40	@ 0x28
 800103a:	f000 fb20 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800103e:	2028      	movs	r0, #40	@ 0x28
 8001040:	f000 fb39 	bl	80016b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800
 8001054:	10110000 	.word	0x10110000
 8001058:	40011000 	.word	0x40011000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <Error_Handler+0x8>

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a14      	ldr	r2, [pc, #80]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_MspInit+0x5c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_MspInit+0x60>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <HAL_MspInit+0x60>)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010000 	.word	0x40010000

080010cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a15      	ldr	r2, [pc, #84]	@ (800113c <HAL_I2C_MspInit+0x70>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d123      	bne.n	8001134 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_I2C_MspInit+0x74>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a13      	ldr	r2, [pc, #76]	@ (8001140 <HAL_I2C_MspInit+0x74>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_I2C_MspInit+0x74>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001104:	23c0      	movs	r3, #192	@ 0xc0
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	480b      	ldr	r0, [pc, #44]	@ (8001144 <HAL_I2C_MspInit+0x78>)
 8001118:	f000 fae8 	bl	80016ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_I2C_MspInit+0x74>)
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <HAL_I2C_MspInit+0x74>)
 8001122:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001126:	61d3      	str	r3, [r2, #28]
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <HAL_I2C_MspInit+0x74>)
 800112a:	69db      	ldr	r3, [r3, #28]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40005400 	.word	0x40005400
 8001140:	40021000 	.word	0x40021000
 8001144:	40010c00 	.word	0x40010c00

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <HAL_UART_MspInit+0x70>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d123      	bne.n	80011b0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_UART_MspInit+0x74>)
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	4a13      	ldr	r2, [pc, #76]	@ (80011bc <HAL_UART_MspInit+0x74>)
 800116e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001172:	61d3      	str	r3, [r2, #28]
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_UART_MspInit+0x74>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b0e      	ldr	r3, [pc, #56]	@ (80011bc <HAL_UART_MspInit+0x74>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a0d      	ldr	r2, [pc, #52]	@ (80011bc <HAL_UART_MspInit+0x74>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <HAL_UART_MspInit+0x74>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001198:	230c      	movs	r3, #12
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	4619      	mov	r1, r3
 80011aa:	4805      	ldr	r0, [pc, #20]	@ (80011c0 <HAL_UART_MspInit+0x78>)
 80011ac:	f000 fa9e 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3720      	adds	r7, #32
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010800 	.word	0x40010800

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001214:	f000 f91c 	bl	8001450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001220:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001224:	f000 fbfe 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}

0800122c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e00a      	b.n	8001254 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800123e:	f3af 8000 	nop.w
 8001242:	4601      	mov	r1, r0
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	60ba      	str	r2, [r7, #8]
 800124a:	b2ca      	uxtb	r2, r1
 800124c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	3301      	adds	r3, #1
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	429a      	cmp	r2, r3
 800125a:	dbf0      	blt.n	800123e <_read+0x12>
  }

  return len;
 800125c:	687b      	ldr	r3, [r7, #4]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	e009      	b.n	800128c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	60ba      	str	r2, [r7, #8]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	dbf1      	blt.n	8001278 <_write+0x12>
  }
  return len;
 8001294:	687b      	ldr	r3, [r7, #4]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <_close>:

int _close(int file)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012c4:	605a      	str	r2, [r3, #4]
  return 0;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <_isatty>:

int _isatty(int file)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
	...

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	@ (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f001 ffe4 	bl	80032fc <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20005000 	.word	0x20005000
 8001360:	00000400 	.word	0x00000400
 8001364:	20000128 	.word	0x20000128
 8001368:	20000280 	.word	0x20000280

0800136c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff fff8 	bl	800136c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480b      	ldr	r0, [pc, #44]	@ (80013ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800137e:	490c      	ldr	r1, [pc, #48]	@ (80013b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001380:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a09      	ldr	r2, [pc, #36]	@ (80013b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001394:	4c09      	ldr	r4, [pc, #36]	@ (80013bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f001 ffb1 	bl	8003308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fd07 	bl	8000db8 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013b4:	08003f5c 	.word	0x08003f5c
  ldr r2, =_sbss
 80013b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013bc:	2000027c 	.word	0x2000027c

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 f947 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f000 f808 	bl	80013f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fe42 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <HAL_InitTick+0x54>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_InitTick+0x58>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f95f 	bl	80016d2 <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e00e      	b.n	800143c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b0f      	cmp	r3, #15
 8001422:	d80a      	bhi.n	800143a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001424:	2200      	movs	r2, #0
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	f000 f927 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001430:	4a06      	ldr	r2, [pc, #24]	@ (800144c <HAL_InitTick+0x5c>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	20000008 	.word	0x20000008
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <HAL_IncTick+0x1c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b05      	ldr	r3, [pc, #20]	@ (8001470 <HAL_IncTick+0x20>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a03      	ldr	r2, [pc, #12]	@ (8001470 <HAL_IncTick+0x20>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000008 	.word	0x20000008
 8001470:	2000012c 	.word	0x2000012c

08001474 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b02      	ldr	r3, [pc, #8]	@ (8001484 <HAL_GetTick+0x10>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	2000012c 	.word	0x2000012c

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff fff0 	bl	8001474 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffe0 	bl	8001474 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000008 	.word	0x20000008

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	@ (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	@ (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4906      	ldr	r1, [pc, #24]	@ (8001568 <__NVIC_EnableIRQ+0x34>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	@ (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	@ (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	@ 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff90 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff2d 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff42 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff35 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	@ 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e169      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8158 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a9a      	ldr	r2, [pc, #616]	@ (800198c <HAL_GPIO_Init+0x2a0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d05e      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001728:	4a98      	ldr	r2, [pc, #608]	@ (800198c <HAL_GPIO_Init+0x2a0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d875      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800172e:	4a98      	ldr	r2, [pc, #608]	@ (8001990 <HAL_GPIO_Init+0x2a4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d058      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001734:	4a96      	ldr	r2, [pc, #600]	@ (8001990 <HAL_GPIO_Init+0x2a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d86f      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800173a:	4a96      	ldr	r2, [pc, #600]	@ (8001994 <HAL_GPIO_Init+0x2a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d052      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001740:	4a94      	ldr	r2, [pc, #592]	@ (8001994 <HAL_GPIO_Init+0x2a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d869      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001746:	4a94      	ldr	r2, [pc, #592]	@ (8001998 <HAL_GPIO_Init+0x2ac>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d04c      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 800174c:	4a92      	ldr	r2, [pc, #584]	@ (8001998 <HAL_GPIO_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d863      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001752:	4a92      	ldr	r2, [pc, #584]	@ (800199c <HAL_GPIO_Init+0x2b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d046      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001758:	4a90      	ldr	r2, [pc, #576]	@ (800199c <HAL_GPIO_Init+0x2b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d85d      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d82a      	bhi.n	80017b8 <HAL_GPIO_Init+0xcc>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d859      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001766:	a201      	add	r2, pc, #4	@ (adr r2, 800176c <HAL_GPIO_Init+0x80>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017c1 	.word	0x080017c1
 8001774:	080017d3 	.word	0x080017d3
 8001778:	08001815 	.word	0x08001815
 800177c:	0800181b 	.word	0x0800181b
 8001780:	0800181b 	.word	0x0800181b
 8001784:	0800181b 	.word	0x0800181b
 8001788:	0800181b 	.word	0x0800181b
 800178c:	0800181b 	.word	0x0800181b
 8001790:	0800181b 	.word	0x0800181b
 8001794:	0800181b 	.word	0x0800181b
 8001798:	0800181b 	.word	0x0800181b
 800179c:	0800181b 	.word	0x0800181b
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	0800181b 	.word	0x0800181b
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	080017c9 	.word	0x080017c9
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	4a79      	ldr	r2, [pc, #484]	@ (80019a0 <HAL_GPIO_Init+0x2b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017be:	e02c      	b.n	800181a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e029      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e024      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	3308      	adds	r3, #8
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e01f      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	330c      	adds	r3, #12
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e01a      	b.n	800181c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ee:	2304      	movs	r3, #4
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e013      	b.n	800181c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	611a      	str	r2, [r3, #16]
          break;
 8001806:	e009      	b.n	800181c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	615a      	str	r2, [r3, #20]
          break;
 8001812:	e003      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x130>
          break;
 800181a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	@ 0xff
 8001820:	d801      	bhi.n	8001826 <HAL_GPIO_Init+0x13a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <HAL_GPIO_Init+0x13e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	@ 0xff
 8001830:	d802      	bhi.n	8001838 <HAL_GPIO_Init+0x14c>
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x152>
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	3b08      	subs	r3, #8
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	210f      	movs	r1, #15
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80b1 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186c:	4b4d      	ldr	r3, [pc, #308]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4c      	ldr	r2, [pc, #304]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b4a      	ldr	r3, [pc, #296]	@ (80019a4 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001884:	4a48      	ldr	r2, [pc, #288]	@ (80019a8 <HAL_GPIO_Init+0x2bc>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a40      	ldr	r2, [pc, #256]	@ (80019ac <HAL_GPIO_Init+0x2c0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1ec>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3f      	ldr	r2, [pc, #252]	@ (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3e      	ldr	r2, [pc, #248]	@ (80019b4 <HAL_GPIO_Init+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1e4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	@ (80019b8 <HAL_GPIO_Init+0x2cc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1e0>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	@ (80019a8 <HAL_GPIO_Init+0x2bc>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	492c      	ldr	r1, [pc, #176]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b2a      	ldr	r3, [pc, #168]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4928      	ldr	r1, [pc, #160]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b23      	ldr	r3, [pc, #140]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4922      	ldr	r1, [pc, #136]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193a:	4b20      	ldr	r3, [pc, #128]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491e      	ldr	r1, [pc, #120]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4918      	ldr	r1, [pc, #96]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4914      	ldr	r1, [pc, #80]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 800196c:	4013      	ands	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d021      	beq.n	80019c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	490e      	ldr	r1, [pc, #56]	@ (80019bc <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e021      	b.n	80019ce <HAL_GPIO_Init+0x2e2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <HAL_GPIO_Init+0x304>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4909      	ldr	r1, [pc, #36]	@ (80019f0 <HAL_GPIO_Init+0x304>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae8e 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	372c      	adds	r7, #44	@ 0x2c
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	611a      	str	r2, [r3, #16]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f806 	bl	8001a54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e12b      	b.n	8001cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fb1c 	bl	80010cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	@ 0x24
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001acc:	f001 f98c 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a81      	ldr	r2, [pc, #516]	@ (8001cdc <HAL_I2C_Init+0x274>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d807      	bhi.n	8001aec <HAL_I2C_Init+0x84>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a80      	ldr	r2, [pc, #512]	@ (8001ce0 <HAL_I2C_Init+0x278>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	bf94      	ite	ls
 8001ae4:	2301      	movls	r3, #1
 8001ae6:	2300      	movhi	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e006      	b.n	8001afa <HAL_I2C_Init+0x92>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a7d      	ldr	r2, [pc, #500]	@ (8001ce4 <HAL_I2C_Init+0x27c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0e7      	b.n	8001cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a78      	ldr	r2, [pc, #480]	@ (8001ce8 <HAL_I2C_Init+0x280>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0c9b      	lsrs	r3, r3, #18
 8001b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a6a      	ldr	r2, [pc, #424]	@ (8001cdc <HAL_I2C_Init+0x274>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d802      	bhi.n	8001b3c <HAL_I2C_Init+0xd4>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	e009      	b.n	8001b50 <HAL_I2C_Init+0xe8>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	4a69      	ldr	r2, [pc, #420]	@ (8001cec <HAL_I2C_Init+0x284>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	3301      	adds	r3, #1
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	495c      	ldr	r1, [pc, #368]	@ (8001cdc <HAL_I2C_Init+0x274>)
 8001b6c:	428b      	cmp	r3, r1
 8001b6e:	d819      	bhi.n	8001ba4 <HAL_I2C_Init+0x13c>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e59      	subs	r1, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001b84:	400b      	ands	r3, r1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HAL_I2C_Init+0x138>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e59      	subs	r1, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9e:	e051      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e04f      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <HAL_I2C_Init+0x168>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e012      	b.n	8001bf6 <HAL_I2C_Init+0x18e>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e58      	subs	r0, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	0099      	lsls	r1, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Init+0x196>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e022      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10e      	bne.n	8001c24 <HAL_I2C_Init+0x1bc>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1e58      	subs	r0, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	440b      	add	r3, r1
 8001c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c22:	e00f      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	0099      	lsls	r1, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	6809      	ldr	r1, [r1, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001c72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6911      	ldr	r1, [r2, #16]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	000186a0 	.word	0x000186a0
 8001ce0:	001e847f 	.word	0x001e847f
 8001ce4:	003d08ff 	.word	0x003d08ff
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	10624dd3 	.word	0x10624dd3

08001cf0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	@ 0x30
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	817b      	strh	r3, [r7, #10]
 8001d00:	4613      	mov	r3, r2
 8001d02:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff fbb4 	bl	8001474 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	f040 824b 	bne.w	80021b2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2319      	movs	r3, #25
 8001d22:	2201      	movs	r2, #1
 8001d24:	497f      	ldr	r1, [pc, #508]	@ (8001f24 <HAL_I2C_Master_Receive+0x234>)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fb1c 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
 8001d34:	e23e      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_I2C_Master_Receive+0x54>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e237      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d007      	beq.n	8001d6a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0201 	orr.w	r2, r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2222      	movs	r2, #34	@ 0x22
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2210      	movs	r2, #16
 8001d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	893a      	ldrh	r2, [r7, #8]
 8001d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4a5f      	ldr	r2, [pc, #380]	@ (8001f28 <HAL_I2C_Master_Receive+0x238>)
 8001daa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dac:	8979      	ldrh	r1, [r7, #10]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f000 fa08 	bl	80021c8 <I2C_MasterRequestRead>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1f8      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d113      	bne.n	8001df2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	61fb      	str	r3, [r7, #28]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	61fb      	str	r3, [r7, #28]
 8001dde:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e1cc      	b.n	800218c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d11e      	bne.n	8001e38 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e08:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0a:	b672      	cpsid	i
}
 8001e0c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e34:	b662      	cpsie	i
}
 8001e36:	e035      	b.n	8001ea4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d11e      	bne.n	8001e7e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e50:	b672      	cpsid	i
}
 8001e52:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e7a:	b662      	cpsie	i
}
 8001e7c:	e012      	b.n	8001ea4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001ea4:	e172      	b.n	800218c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	f200 811f 	bhi.w	80020ee <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d123      	bne.n	8001f00 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fb6b 	bl	8002598 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e173      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001efe:	e145      	b.n	800218c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d152      	bne.n	8001fae <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4906      	ldr	r1, [pc, #24]	@ (8001f2c <HAL_I2C_Master_Receive+0x23c>)
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 fa26 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d008      	beq.n	8001f30 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e148      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
 8001f22:	bf00      	nop
 8001f24:	00100002 	.word	0x00100002
 8001f28:	ffff0000 	.word	0xffff0000
 8001f2c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f76:	b662      	cpsie	i
}
 8001f78:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fac:	e0ee      	b.n	800218c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4981      	ldr	r1, [pc, #516]	@ (80021bc <HAL_I2C_Master_Receive+0x4cc>)
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 f9d3 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0f5      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800200e:	4b6c      	ldr	r3, [pc, #432]	@ (80021c0 <HAL_I2C_Master_Receive+0x4d0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	4a6b      	ldr	r2, [pc, #428]	@ (80021c4 <HAL_I2C_Master_Receive+0x4d4>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0a1a      	lsrs	r2, r3, #8
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00da      	lsls	r2, r3, #3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	3b01      	subs	r3, #1
 800202c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800202e:	6a3b      	ldr	r3, [r7, #32]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d118      	bne.n	8002066 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2220      	movs	r2, #32
 800203e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f043 0220 	orr.w	r2, r3, #32
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002056:	b662      	cpsie	i
}
 8002058:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e0a6      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b04      	cmp	r3, #4
 8002072:	d1d9      	bne.n	8002028 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020b6:	b662      	cpsie	i
}
 80020b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020ec:	e04e      	b.n	800218c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fa50 	bl	8002598 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e058      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b04      	cmp	r3, #4
 8002140:	d124      	bne.n	800218c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002146:	2b03      	cmp	r3, #3
 8002148:	d107      	bne.n	800215a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002158:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f ae88 	bne.w	8001ea6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
  }
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3728      	adds	r7, #40	@ 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	00010004 	.word	0x00010004
 80021c0:	20000000 	.word	0x20000000
 80021c4:	14f8b589 	.word	0x14f8b589

080021c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	460b      	mov	r3, r1
 80021d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d006      	beq.n	8002202 <I2C_MasterRequestRead+0x3a>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d003      	beq.n	8002202 <I2C_MasterRequestRead+0x3a>
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002200:	d108      	bne.n	8002214 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e00b      	b.n	800222c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	2b11      	cmp	r3, #17
 800221a:	d107      	bne.n	800222c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800222a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f893 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00d      	beq.n	8002260 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002252:	d103      	bne.n	800225c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800225a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e079      	b.n	8002354 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002268:	d108      	bne.n	800227c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800226a:	897b      	ldrh	r3, [r7, #10]
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	611a      	str	r2, [r3, #16]
 800227a:	e05f      	b.n	800233c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800227c:	897b      	ldrh	r3, [r7, #10]
 800227e:	11db      	asrs	r3, r3, #7
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f003 0306 	and.w	r3, r3, #6
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f063 030f 	orn	r3, r3, #15
 800228c:	b2da      	uxtb	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	4930      	ldr	r1, [pc, #192]	@ (800235c <I2C_MasterRequestRead+0x194>)
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f8dc 	bl	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e054      	b.n	8002354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022aa:	897b      	ldrh	r3, [r7, #10]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	4929      	ldr	r1, [pc, #164]	@ (8002360 <I2C_MasterRequestRead+0x198>)
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f8cc 	bl	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e044      	b.n	8002354 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 f831 	bl	8002364 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00d      	beq.n	8002324 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002316:	d103      	bne.n	8002320 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e017      	b.n	8002354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002324:	897b      	ldrh	r3, [r7, #10]
 8002326:	11db      	asrs	r3, r3, #7
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f003 0306 	and.w	r3, r3, #6
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f063 030e 	orn	r3, r3, #14
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4907      	ldr	r1, [pc, #28]	@ (8002360 <I2C_MasterRequestRead+0x198>)
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f888 	bl	8002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	00010008 	.word	0x00010008
 8002360:	00010002 	.word	0x00010002

08002364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002374:	e048      	b.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d044      	beq.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237e:	f7ff f879 	bl	8001474 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d302      	bcc.n	8002394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d139      	bne.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	0c1b      	lsrs	r3, r3, #16
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b01      	cmp	r3, #1
 800239c:	d10d      	bne.n	80023ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	43da      	mvns	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4013      	ands	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf0c      	ite	eq
 80023b0:	2301      	moveq	r3, #1
 80023b2:	2300      	movne	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	e00c      	b.n	80023d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	43da      	mvns	r2, r3
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	4013      	ands	r3, r2
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	461a      	mov	r2, r3
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d116      	bne.n	8002408 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e023      	b.n	8002450 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	0c1b      	lsrs	r3, r3, #16
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10d      	bne.n	800242e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	43da      	mvns	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4013      	ands	r3, r2
 800241e:	b29b      	uxth	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	e00c      	b.n	8002448 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	43da      	mvns	r2, r3
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	4013      	ands	r3, r2
 800243a:	b29b      	uxth	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf0c      	ite	eq
 8002440:	2301      	moveq	r3, #1
 8002442:	2300      	movne	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	429a      	cmp	r2, r3
 800244c:	d093      	beq.n	8002376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002466:	e071      	b.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002476:	d123      	bne.n	80024c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002486:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f043 0204 	orr.w	r2, r3, #4
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e067      	b.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d041      	beq.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c8:	f7fe ffd4 	bl	8001474 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d302      	bcc.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d136      	bne.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	0c1b      	lsrs	r3, r3, #16
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10c      	bne.n	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	43da      	mvns	r2, r3
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e00b      	b.n	800251a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	43da      	mvns	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	4013      	ands	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf14      	ite	ne
 8002514:	2301      	movne	r3, #1
 8002516:	2300      	moveq	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e021      	b.n	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	0c1b      	lsrs	r3, r3, #16
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10c      	bne.n	8002570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e00b      	b.n	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4013      	ands	r3, r2
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	bf14      	ite	ne
 8002582:	2301      	movne	r3, #1
 8002584:	2300      	moveq	r3, #0
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	f47f af6d 	bne.w	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025a4:	e049      	b.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d119      	bne.n	80025e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f06f 0210 	mvn.w	r2, #16
 80025bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e030      	b.n	800264a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e8:	f7fe ff44 	bl	8001474 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d302      	bcc.n	80025fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d11d      	bne.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002608:	2b40      	cmp	r3, #64	@ 0x40
 800260a:	d016      	beq.n	800263a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e007      	b.n	800264a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002644:	2b40      	cmp	r3, #64	@ 0x40
 8002646:	d1ae      	bne.n	80025a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e272      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8087 	beq.w	8002782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002674:	4b92      	ldr	r3, [pc, #584]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b04      	cmp	r3, #4
 800267e:	d00c      	beq.n	800269a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002680:	4b8f      	ldr	r3, [pc, #572]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d112      	bne.n	80026b2 <HAL_RCC_OscConfig+0x5e>
 800268c:	4b8c      	ldr	r3, [pc, #560]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002698:	d10b      	bne.n	80026b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d06c      	beq.n	8002780 <HAL_RCC_OscConfig+0x12c>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d168      	bne.n	8002780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e24c      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026ba:	d106      	bne.n	80026ca <HAL_RCC_OscConfig+0x76>
 80026bc:	4b80      	ldr	r3, [pc, #512]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a7f      	ldr	r2, [pc, #508]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e02e      	b.n	8002728 <HAL_RCC_OscConfig+0xd4>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10c      	bne.n	80026ec <HAL_RCC_OscConfig+0x98>
 80026d2:	4b7b      	ldr	r3, [pc, #492]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7a      	ldr	r2, [pc, #488]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	4b78      	ldr	r3, [pc, #480]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a77      	ldr	r2, [pc, #476]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	e01d      	b.n	8002728 <HAL_RCC_OscConfig+0xd4>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCC_OscConfig+0xbc>
 80026f6:	4b72      	ldr	r3, [pc, #456]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a71      	ldr	r2, [pc, #452]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6e      	ldr	r2, [pc, #440]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	e00b      	b.n	8002728 <HAL_RCC_OscConfig+0xd4>
 8002710:	4b6b      	ldr	r3, [pc, #428]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a6a      	ldr	r2, [pc, #424]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b68      	ldr	r3, [pc, #416]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a67      	ldr	r2, [pc, #412]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002726:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fea0 	bl	8001474 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fe9c 	bl	8001474 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e200      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b5d      	ldr	r3, [pc, #372]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0xe4>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fe8c 	bl	8001474 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fe88 	bl	8001474 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	@ 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1ec      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x10c>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d063      	beq.n	8002856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800278e:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d11c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x18c>
 80027a6:	4b46      	ldr	r3, [pc, #280]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d116      	bne.n	80027e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b2:	4b43      	ldr	r3, [pc, #268]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCC_OscConfig+0x176>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e1c0      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ca:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4939      	ldr	r1, [pc, #228]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027de:	e03a      	b.n	8002856 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e8:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_RCC_OscConfig+0x270>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fe41 	bl	8001474 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe fe3d 	bl	8001474 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e1a1      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4927      	ldr	r1, [pc, #156]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	600b      	str	r3, [r1, #0]
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282a:	4b26      	ldr	r3, [pc, #152]	@ (80028c4 <HAL_RCC_OscConfig+0x270>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fe20 	bl	8001474 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002838:	f7fe fe1c 	bl	8001474 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e180      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d03a      	beq.n	80028d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d019      	beq.n	800289e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286a:	4b17      	ldr	r3, [pc, #92]	@ (80028c8 <HAL_RCC_OscConfig+0x274>)
 800286c:	2201      	movs	r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002870:	f7fe fe00 	bl	8001474 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002878:	f7fe fdfc 	bl	8001474 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e160      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <HAL_RCC_OscConfig+0x26c>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002896:	2001      	movs	r0, #1
 8002898:	f000 face 	bl	8002e38 <RCC_Delay>
 800289c:	e01c      	b.n	80028d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289e:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_RCC_OscConfig+0x274>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a4:	f7fe fde6 	bl	8001474 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028aa:	e00f      	b.n	80028cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ac:	f7fe fde2 	bl	8001474 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d908      	bls.n	80028cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e146      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	42420000 	.word	0x42420000
 80028c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028cc:	4b92      	ldr	r3, [pc, #584]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1e9      	bne.n	80028ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 80a6 	beq.w	8002a32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10d      	bne.n	8002912 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	4b88      	ldr	r3, [pc, #544]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4a87      	ldr	r2, [pc, #540]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002900:	61d3      	str	r3, [r2, #28]
 8002902:	4b85      	ldr	r3, [pc, #532]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b82      	ldr	r3, [pc, #520]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291e:	4b7f      	ldr	r3, [pc, #508]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a7e      	ldr	r2, [pc, #504]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe fda3 	bl	8001474 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe fd9f 	bl	8001474 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	@ 0x64
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e103      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b75      	ldr	r3, [pc, #468]	@ (8002b1c <HAL_RCC_OscConfig+0x4c8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x312>
 8002958:	4b6f      	ldr	r3, [pc, #444]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6213      	str	r3, [r2, #32]
 8002964:	e02d      	b.n	80029c2 <HAL_RCC_OscConfig+0x36e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x334>
 800296e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a69      	ldr	r2, [pc, #420]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0301 	bic.w	r3, r3, #1
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	4b67      	ldr	r3, [pc, #412]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a66      	ldr	r2, [pc, #408]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002980:	f023 0304 	bic.w	r3, r3, #4
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	e01c      	b.n	80029c2 <HAL_RCC_OscConfig+0x36e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x356>
 8002990:	4b61      	ldr	r3, [pc, #388]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a60      	ldr	r2, [pc, #384]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6213      	str	r3, [r2, #32]
 80029a8:	e00b      	b.n	80029c2 <HAL_RCC_OscConfig+0x36e>
 80029aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6213      	str	r3, [r2, #32]
 80029b6:	4b58      	ldr	r3, [pc, #352]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	4a57      	ldr	r2, [pc, #348]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d015      	beq.n	80029f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fd53 	bl	8001474 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fd4f 	bl	8001474 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0b1      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RCC_OscConfig+0x37e>
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7fe fd3d 	bl	8001474 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fd39 	bl	8001474 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e09b      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a14:	4b40      	ldr	r3, [pc, #256]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d105      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b3c      	ldr	r3, [pc, #240]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 8087 	beq.w	8002b4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a3c:	4b36      	ldr	r3, [pc, #216]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d061      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d146      	bne.n	8002ade <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b33      	ldr	r3, [pc, #204]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a56:	f7fe fd0d 	bl	8001474 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fd09 	bl	8001474 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e06d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a70:	4b29      	ldr	r3, [pc, #164]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f0      	bne.n	8002a5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a84:	d108      	bne.n	8002a98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4921      	ldr	r1, [pc, #132]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a98:	4b1f      	ldr	r3, [pc, #124]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a19      	ldr	r1, [r3, #32]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	491b      	ldr	r1, [pc, #108]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab6:	f7fe fcdd 	bl	8001474 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fcd9 	bl	8001474 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e03d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ad0:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_OscConfig+0x46a>
 8002adc:	e035      	b.n	8002b4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fcc6 	bl	8001474 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aec:	f7fe fcc2 	bl	8001474 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e026      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x498>
 8002b0a:	e01e      	b.n	8002b4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e019      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_OscConfig+0x500>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d106      	bne.n	8002b46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0d0      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d910      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b67      	ldr	r3, [pc, #412]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4965      	ldr	r1, [pc, #404]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0b8      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb4:	4b59      	ldr	r3, [pc, #356]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4a58      	ldr	r2, [pc, #352]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bcc:	4b53      	ldr	r3, [pc, #332]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002bd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd8:	4b50      	ldr	r3, [pc, #320]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	494d      	ldr	r1, [pc, #308]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d040      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d107      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b47      	ldr	r3, [pc, #284]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d115      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e07f      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d107      	bne.n	8002c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c16:	4b41      	ldr	r3, [pc, #260]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e073      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c26:	4b3d      	ldr	r3, [pc, #244]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e06b      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c36:	4b39      	ldr	r3, [pc, #228]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f023 0203 	bic.w	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4936      	ldr	r1, [pc, #216]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fc14 	bl	8001474 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c50:	f7fe fc10 	bl	8001474 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e053      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c66:	4b2d      	ldr	r3, [pc, #180]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f003 020c 	and.w	r2, r3, #12
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d1eb      	bne.n	8002c50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c78:	4b27      	ldr	r3, [pc, #156]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d210      	bcs.n	8002ca8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4922      	ldr	r1, [pc, #136]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b20      	ldr	r3, [pc, #128]	@ (8002d18 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e032      	b.n	8002d0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b19      	ldr	r3, [pc, #100]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4916      	ldr	r1, [pc, #88]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd2:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	490e      	ldr	r1, [pc, #56]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce6:	f000 f821 	bl	8002d2c <HAL_RCC_GetSysClockFreq>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_RCC_ClockConfig+0x1c4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	490a      	ldr	r1, [pc, #40]	@ (8002d20 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	5ccb      	ldrb	r3, [r1, r3]
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	4a09      	ldr	r2, [pc, #36]	@ (8002d24 <HAL_RCC_ClockConfig+0x1cc>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_RCC_ClockConfig+0x1d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fb72 	bl	80013f0 <HAL_InitTick>

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08003ef4 	.word	0x08003ef4
 8002d24:	20000000 	.word	0x20000000
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d46:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x30>
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x36>
 8002d5a:	e027      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d5e:	613b      	str	r3, [r7, #16]
      break;
 8002d60:	e027      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0c9b      	lsrs	r3, r3, #18
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	4a17      	ldr	r2, [pc, #92]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d6c:	5cd3      	ldrb	r3, [r2, r3]
 8002d6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d010      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	0c5b      	lsrs	r3, r3, #17
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	4a11      	ldr	r2, [pc, #68]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d86:	5cd3      	ldrb	r3, [r2, r3]
 8002d88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d8e:	fb03 f202 	mul.w	r2, r3, r2
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e004      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	613b      	str	r3, [r7, #16]
      break;
 8002daa:	e002      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dae:	613b      	str	r3, [r7, #16]
      break;
 8002db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db2:	693b      	ldr	r3, [r7, #16]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	007a1200 	.word	0x007a1200
 8002dc8:	08003f0c 	.word	0x08003f0c
 8002dcc:	08003f1c 	.word	0x08003f1c
 8002dd0:	003d0900 	.word	0x003d0900

08002dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd8:	4b02      	ldr	r3, [pc, #8]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dda:	681b      	ldr	r3, [r3, #0]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff2 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08003f04 	.word	0x08003f04

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffde 	bl	8002dd4 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	0adb      	lsrs	r3, r3, #11
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	08003f04 	.word	0x08003f04

08002e38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <RCC_Delay+0x34>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <RCC_Delay+0x38>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0a5b      	lsrs	r3, r3, #9
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e54:	bf00      	nop
  }
  while (Delay --);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1e5a      	subs	r2, r3, #1
 8002e5a:	60fa      	str	r2, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f9      	bne.n	8002e54 <RCC_Delay+0x1c>
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	10624dd3 	.word	0x10624dd3

08002e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e042      	b.n	8002f0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7fe f954 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2224      	movs	r2, #36	@ 0x24
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f82b 	bl	8002f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695a      	ldr	r2, [r3, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f4e:	f023 030c 	bic.w	r3, r3, #12
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a2c      	ldr	r2, [pc, #176]	@ (8003028 <UART_SetConfig+0x114>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d103      	bne.n	8002f84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7ff ff48 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	e002      	b.n	8002f8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f84:	f7ff ff30 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8002f88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009a      	lsls	r2, r3, #2
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	4a22      	ldr	r2, [pc, #136]	@ (800302c <UART_SetConfig+0x118>)
 8002fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	0119      	lsls	r1, r3, #4
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	441a      	add	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <UART_SetConfig+0x118>)
 8002fc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	2064      	movs	r0, #100	@ 0x64
 8002fca:	fb00 f303 	mul.w	r3, r0, r3
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	3332      	adds	r3, #50	@ 0x32
 8002fd4:	4a15      	ldr	r2, [pc, #84]	@ (800302c <UART_SetConfig+0x118>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	095b      	lsrs	r3, r3, #5
 8002fdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe0:	4419      	add	r1, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009a      	lsls	r2, r3, #2
 8002fec:	441a      	add	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <UART_SetConfig+0x118>)
 8002ffa:	fba3 0302 	umull	r0, r3, r3, r2
 8002ffe:	095b      	lsrs	r3, r3, #5
 8003000:	2064      	movs	r0, #100	@ 0x64
 8003002:	fb00 f303 	mul.w	r3, r0, r3
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	3332      	adds	r3, #50	@ 0x32
 800300c:	4a07      	ldr	r2, [pc, #28]	@ (800302c <UART_SetConfig+0x118>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	f003 020f 	and.w	r2, r3, #15
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	440a      	add	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40013800 	.word	0x40013800
 800302c:	51eb851f 	.word	0x51eb851f

08003030 <std>:
 8003030:	2300      	movs	r3, #0
 8003032:	b510      	push	{r4, lr}
 8003034:	4604      	mov	r4, r0
 8003036:	e9c0 3300 	strd	r3, r3, [r0]
 800303a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800303e:	6083      	str	r3, [r0, #8]
 8003040:	8181      	strh	r1, [r0, #12]
 8003042:	6643      	str	r3, [r0, #100]	@ 0x64
 8003044:	81c2      	strh	r2, [r0, #14]
 8003046:	6183      	str	r3, [r0, #24]
 8003048:	4619      	mov	r1, r3
 800304a:	2208      	movs	r2, #8
 800304c:	305c      	adds	r0, #92	@ 0x5c
 800304e:	f000 f906 	bl	800325e <memset>
 8003052:	4b0d      	ldr	r3, [pc, #52]	@ (8003088 <std+0x58>)
 8003054:	6224      	str	r4, [r4, #32]
 8003056:	6263      	str	r3, [r4, #36]	@ 0x24
 8003058:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <std+0x5c>)
 800305a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <std+0x60>)
 800305e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003060:	4b0c      	ldr	r3, [pc, #48]	@ (8003094 <std+0x64>)
 8003062:	6323      	str	r3, [r4, #48]	@ 0x30
 8003064:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <std+0x68>)
 8003066:	429c      	cmp	r4, r3
 8003068:	d006      	beq.n	8003078 <std+0x48>
 800306a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800306e:	4294      	cmp	r4, r2
 8003070:	d002      	beq.n	8003078 <std+0x48>
 8003072:	33d0      	adds	r3, #208	@ 0xd0
 8003074:	429c      	cmp	r4, r3
 8003076:	d105      	bne.n	8003084 <std+0x54>
 8003078:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800307c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003080:	f000 b966 	b.w	8003350 <__retarget_lock_init_recursive>
 8003084:	bd10      	pop	{r4, pc}
 8003086:	bf00      	nop
 8003088:	080031d9 	.word	0x080031d9
 800308c:	080031fb 	.word	0x080031fb
 8003090:	08003233 	.word	0x08003233
 8003094:	08003257 	.word	0x08003257
 8003098:	20000130 	.word	0x20000130

0800309c <stdio_exit_handler>:
 800309c:	4a02      	ldr	r2, [pc, #8]	@ (80030a8 <stdio_exit_handler+0xc>)
 800309e:	4903      	ldr	r1, [pc, #12]	@ (80030ac <stdio_exit_handler+0x10>)
 80030a0:	4803      	ldr	r0, [pc, #12]	@ (80030b0 <stdio_exit_handler+0x14>)
 80030a2:	f000 b869 	b.w	8003178 <_fwalk_sglue>
 80030a6:	bf00      	nop
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	08003be9 	.word	0x08003be9
 80030b0:	2000001c 	.word	0x2000001c

080030b4 <cleanup_stdio>:
 80030b4:	6841      	ldr	r1, [r0, #4]
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <cleanup_stdio+0x34>)
 80030b8:	b510      	push	{r4, lr}
 80030ba:	4299      	cmp	r1, r3
 80030bc:	4604      	mov	r4, r0
 80030be:	d001      	beq.n	80030c4 <cleanup_stdio+0x10>
 80030c0:	f000 fd92 	bl	8003be8 <_fflush_r>
 80030c4:	68a1      	ldr	r1, [r4, #8]
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <cleanup_stdio+0x38>)
 80030c8:	4299      	cmp	r1, r3
 80030ca:	d002      	beq.n	80030d2 <cleanup_stdio+0x1e>
 80030cc:	4620      	mov	r0, r4
 80030ce:	f000 fd8b 	bl	8003be8 <_fflush_r>
 80030d2:	68e1      	ldr	r1, [r4, #12]
 80030d4:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <cleanup_stdio+0x3c>)
 80030d6:	4299      	cmp	r1, r3
 80030d8:	d004      	beq.n	80030e4 <cleanup_stdio+0x30>
 80030da:	4620      	mov	r0, r4
 80030dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e0:	f000 bd82 	b.w	8003be8 <_fflush_r>
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	bf00      	nop
 80030e8:	20000130 	.word	0x20000130
 80030ec:	20000198 	.word	0x20000198
 80030f0:	20000200 	.word	0x20000200

080030f4 <global_stdio_init.part.0>:
 80030f4:	b510      	push	{r4, lr}
 80030f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <global_stdio_init.part.0+0x30>)
 80030f8:	4c0b      	ldr	r4, [pc, #44]	@ (8003128 <global_stdio_init.part.0+0x34>)
 80030fa:	4a0c      	ldr	r2, [pc, #48]	@ (800312c <global_stdio_init.part.0+0x38>)
 80030fc:	4620      	mov	r0, r4
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	2104      	movs	r1, #4
 8003102:	2200      	movs	r2, #0
 8003104:	f7ff ff94 	bl	8003030 <std>
 8003108:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800310c:	2201      	movs	r2, #1
 800310e:	2109      	movs	r1, #9
 8003110:	f7ff ff8e 	bl	8003030 <std>
 8003114:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003118:	2202      	movs	r2, #2
 800311a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800311e:	2112      	movs	r1, #18
 8003120:	f7ff bf86 	b.w	8003030 <std>
 8003124:	20000268 	.word	0x20000268
 8003128:	20000130 	.word	0x20000130
 800312c:	0800309d 	.word	0x0800309d

08003130 <__sfp_lock_acquire>:
 8003130:	4801      	ldr	r0, [pc, #4]	@ (8003138 <__sfp_lock_acquire+0x8>)
 8003132:	f000 b90e 	b.w	8003352 <__retarget_lock_acquire_recursive>
 8003136:	bf00      	nop
 8003138:	20000271 	.word	0x20000271

0800313c <__sfp_lock_release>:
 800313c:	4801      	ldr	r0, [pc, #4]	@ (8003144 <__sfp_lock_release+0x8>)
 800313e:	f000 b909 	b.w	8003354 <__retarget_lock_release_recursive>
 8003142:	bf00      	nop
 8003144:	20000271 	.word	0x20000271

08003148 <__sinit>:
 8003148:	b510      	push	{r4, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	f7ff fff0 	bl	8003130 <__sfp_lock_acquire>
 8003150:	6a23      	ldr	r3, [r4, #32]
 8003152:	b11b      	cbz	r3, 800315c <__sinit+0x14>
 8003154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003158:	f7ff bff0 	b.w	800313c <__sfp_lock_release>
 800315c:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <__sinit+0x28>)
 800315e:	6223      	str	r3, [r4, #32]
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <__sinit+0x2c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f5      	bne.n	8003154 <__sinit+0xc>
 8003168:	f7ff ffc4 	bl	80030f4 <global_stdio_init.part.0>
 800316c:	e7f2      	b.n	8003154 <__sinit+0xc>
 800316e:	bf00      	nop
 8003170:	080030b5 	.word	0x080030b5
 8003174:	20000268 	.word	0x20000268

08003178 <_fwalk_sglue>:
 8003178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800317c:	4607      	mov	r7, r0
 800317e:	4688      	mov	r8, r1
 8003180:	4614      	mov	r4, r2
 8003182:	2600      	movs	r6, #0
 8003184:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003188:	f1b9 0901 	subs.w	r9, r9, #1
 800318c:	d505      	bpl.n	800319a <_fwalk_sglue+0x22>
 800318e:	6824      	ldr	r4, [r4, #0]
 8003190:	2c00      	cmp	r4, #0
 8003192:	d1f7      	bne.n	8003184 <_fwalk_sglue+0xc>
 8003194:	4630      	mov	r0, r6
 8003196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800319a:	89ab      	ldrh	r3, [r5, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d907      	bls.n	80031b0 <_fwalk_sglue+0x38>
 80031a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031a4:	3301      	adds	r3, #1
 80031a6:	d003      	beq.n	80031b0 <_fwalk_sglue+0x38>
 80031a8:	4629      	mov	r1, r5
 80031aa:	4638      	mov	r0, r7
 80031ac:	47c0      	blx	r8
 80031ae:	4306      	orrs	r6, r0
 80031b0:	3568      	adds	r5, #104	@ 0x68
 80031b2:	e7e9      	b.n	8003188 <_fwalk_sglue+0x10>

080031b4 <iprintf>:
 80031b4:	b40f      	push	{r0, r1, r2, r3}
 80031b6:	b507      	push	{r0, r1, r2, lr}
 80031b8:	4906      	ldr	r1, [pc, #24]	@ (80031d4 <iprintf+0x20>)
 80031ba:	ab04      	add	r3, sp, #16
 80031bc:	6808      	ldr	r0, [r1, #0]
 80031be:	f853 2b04 	ldr.w	r2, [r3], #4
 80031c2:	6881      	ldr	r1, [r0, #8]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	f000 f9e5 	bl	8003594 <_vfiprintf_r>
 80031ca:	b003      	add	sp, #12
 80031cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80031d0:	b004      	add	sp, #16
 80031d2:	4770      	bx	lr
 80031d4:	20000018 	.word	0x20000018

080031d8 <__sread>:
 80031d8:	b510      	push	{r4, lr}
 80031da:	460c      	mov	r4, r1
 80031dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031e0:	f000 f868 	bl	80032b4 <_read_r>
 80031e4:	2800      	cmp	r0, #0
 80031e6:	bfab      	itete	ge
 80031e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031ea:	89a3      	ldrhlt	r3, [r4, #12]
 80031ec:	181b      	addge	r3, r3, r0
 80031ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031f2:	bfac      	ite	ge
 80031f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80031f6:	81a3      	strhlt	r3, [r4, #12]
 80031f8:	bd10      	pop	{r4, pc}

080031fa <__swrite>:
 80031fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031fe:	461f      	mov	r7, r3
 8003200:	898b      	ldrh	r3, [r1, #12]
 8003202:	4605      	mov	r5, r0
 8003204:	05db      	lsls	r3, r3, #23
 8003206:	460c      	mov	r4, r1
 8003208:	4616      	mov	r6, r2
 800320a:	d505      	bpl.n	8003218 <__swrite+0x1e>
 800320c:	2302      	movs	r3, #2
 800320e:	2200      	movs	r2, #0
 8003210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003214:	f000 f83c 	bl	8003290 <_lseek_r>
 8003218:	89a3      	ldrh	r3, [r4, #12]
 800321a:	4632      	mov	r2, r6
 800321c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003220:	81a3      	strh	r3, [r4, #12]
 8003222:	4628      	mov	r0, r5
 8003224:	463b      	mov	r3, r7
 8003226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800322a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800322e:	f000 b853 	b.w	80032d8 <_write_r>

08003232 <__sseek>:
 8003232:	b510      	push	{r4, lr}
 8003234:	460c      	mov	r4, r1
 8003236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800323a:	f000 f829 	bl	8003290 <_lseek_r>
 800323e:	1c43      	adds	r3, r0, #1
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	bf15      	itete	ne
 8003244:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003246:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800324a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800324e:	81a3      	strheq	r3, [r4, #12]
 8003250:	bf18      	it	ne
 8003252:	81a3      	strhne	r3, [r4, #12]
 8003254:	bd10      	pop	{r4, pc}

08003256 <__sclose>:
 8003256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800325a:	f000 b809 	b.w	8003270 <_close_r>

0800325e <memset>:
 800325e:	4603      	mov	r3, r0
 8003260:	4402      	add	r2, r0
 8003262:	4293      	cmp	r3, r2
 8003264:	d100      	bne.n	8003268 <memset+0xa>
 8003266:	4770      	bx	lr
 8003268:	f803 1b01 	strb.w	r1, [r3], #1
 800326c:	e7f9      	b.n	8003262 <memset+0x4>
	...

08003270 <_close_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	2300      	movs	r3, #0
 8003274:	4d05      	ldr	r5, [pc, #20]	@ (800328c <_close_r+0x1c>)
 8003276:	4604      	mov	r4, r0
 8003278:	4608      	mov	r0, r1
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	f7fe f80f 	bl	800129e <_close>
 8003280:	1c43      	adds	r3, r0, #1
 8003282:	d102      	bne.n	800328a <_close_r+0x1a>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	b103      	cbz	r3, 800328a <_close_r+0x1a>
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	2000026c 	.word	0x2000026c

08003290 <_lseek_r>:
 8003290:	b538      	push	{r3, r4, r5, lr}
 8003292:	4604      	mov	r4, r0
 8003294:	4608      	mov	r0, r1
 8003296:	4611      	mov	r1, r2
 8003298:	2200      	movs	r2, #0
 800329a:	4d05      	ldr	r5, [pc, #20]	@ (80032b0 <_lseek_r+0x20>)
 800329c:	602a      	str	r2, [r5, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	f7fe f821 	bl	80012e6 <_lseek>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d102      	bne.n	80032ae <_lseek_r+0x1e>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	b103      	cbz	r3, 80032ae <_lseek_r+0x1e>
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	2000026c 	.word	0x2000026c

080032b4 <_read_r>:
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4604      	mov	r4, r0
 80032b8:	4608      	mov	r0, r1
 80032ba:	4611      	mov	r1, r2
 80032bc:	2200      	movs	r2, #0
 80032be:	4d05      	ldr	r5, [pc, #20]	@ (80032d4 <_read_r+0x20>)
 80032c0:	602a      	str	r2, [r5, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f7fd ffb2 	bl	800122c <_read>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d102      	bne.n	80032d2 <_read_r+0x1e>
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	b103      	cbz	r3, 80032d2 <_read_r+0x1e>
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	2000026c 	.word	0x2000026c

080032d8 <_write_r>:
 80032d8:	b538      	push	{r3, r4, r5, lr}
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	4611      	mov	r1, r2
 80032e0:	2200      	movs	r2, #0
 80032e2:	4d05      	ldr	r5, [pc, #20]	@ (80032f8 <_write_r+0x20>)
 80032e4:	602a      	str	r2, [r5, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	f7fd ffbd 	bl	8001266 <_write>
 80032ec:	1c43      	adds	r3, r0, #1
 80032ee:	d102      	bne.n	80032f6 <_write_r+0x1e>
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	b103      	cbz	r3, 80032f6 <_write_r+0x1e>
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	bd38      	pop	{r3, r4, r5, pc}
 80032f8:	2000026c 	.word	0x2000026c

080032fc <__errno>:
 80032fc:	4b01      	ldr	r3, [pc, #4]	@ (8003304 <__errno+0x8>)
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000018 	.word	0x20000018

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	2600      	movs	r6, #0
 800330c:	4d0c      	ldr	r5, [pc, #48]	@ (8003340 <__libc_init_array+0x38>)
 800330e:	4c0d      	ldr	r4, [pc, #52]	@ (8003344 <__libc_init_array+0x3c>)
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	f000 fdc4 	bl	8003ea4 <_init>
 800331c:	2600      	movs	r6, #0
 800331e:	4d0a      	ldr	r5, [pc, #40]	@ (8003348 <__libc_init_array+0x40>)
 8003320:	4c0a      	ldr	r4, [pc, #40]	@ (800334c <__libc_init_array+0x44>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	f855 3b04 	ldr.w	r3, [r5], #4
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	08003f54 	.word	0x08003f54
 8003344:	08003f54 	.word	0x08003f54
 8003348:	08003f54 	.word	0x08003f54
 800334c:	08003f58 	.word	0x08003f58

08003350 <__retarget_lock_init_recursive>:
 8003350:	4770      	bx	lr

08003352 <__retarget_lock_acquire_recursive>:
 8003352:	4770      	bx	lr

08003354 <__retarget_lock_release_recursive>:
 8003354:	4770      	bx	lr
	...

08003358 <_free_r>:
 8003358:	b538      	push	{r3, r4, r5, lr}
 800335a:	4605      	mov	r5, r0
 800335c:	2900      	cmp	r1, #0
 800335e:	d040      	beq.n	80033e2 <_free_r+0x8a>
 8003360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003364:	1f0c      	subs	r4, r1, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	bfb8      	it	lt
 800336a:	18e4      	addlt	r4, r4, r3
 800336c:	f000 f8de 	bl	800352c <__malloc_lock>
 8003370:	4a1c      	ldr	r2, [pc, #112]	@ (80033e4 <_free_r+0x8c>)
 8003372:	6813      	ldr	r3, [r2, #0]
 8003374:	b933      	cbnz	r3, 8003384 <_free_r+0x2c>
 8003376:	6063      	str	r3, [r4, #4]
 8003378:	6014      	str	r4, [r2, #0]
 800337a:	4628      	mov	r0, r5
 800337c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003380:	f000 b8da 	b.w	8003538 <__malloc_unlock>
 8003384:	42a3      	cmp	r3, r4
 8003386:	d908      	bls.n	800339a <_free_r+0x42>
 8003388:	6820      	ldr	r0, [r4, #0]
 800338a:	1821      	adds	r1, r4, r0
 800338c:	428b      	cmp	r3, r1
 800338e:	bf01      	itttt	eq
 8003390:	6819      	ldreq	r1, [r3, #0]
 8003392:	685b      	ldreq	r3, [r3, #4]
 8003394:	1809      	addeq	r1, r1, r0
 8003396:	6021      	streq	r1, [r4, #0]
 8003398:	e7ed      	b.n	8003376 <_free_r+0x1e>
 800339a:	461a      	mov	r2, r3
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	b10b      	cbz	r3, 80033a4 <_free_r+0x4c>
 80033a0:	42a3      	cmp	r3, r4
 80033a2:	d9fa      	bls.n	800339a <_free_r+0x42>
 80033a4:	6811      	ldr	r1, [r2, #0]
 80033a6:	1850      	adds	r0, r2, r1
 80033a8:	42a0      	cmp	r0, r4
 80033aa:	d10b      	bne.n	80033c4 <_free_r+0x6c>
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	4401      	add	r1, r0
 80033b0:	1850      	adds	r0, r2, r1
 80033b2:	4283      	cmp	r3, r0
 80033b4:	6011      	str	r1, [r2, #0]
 80033b6:	d1e0      	bne.n	800337a <_free_r+0x22>
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4408      	add	r0, r1
 80033be:	6010      	str	r0, [r2, #0]
 80033c0:	6053      	str	r3, [r2, #4]
 80033c2:	e7da      	b.n	800337a <_free_r+0x22>
 80033c4:	d902      	bls.n	80033cc <_free_r+0x74>
 80033c6:	230c      	movs	r3, #12
 80033c8:	602b      	str	r3, [r5, #0]
 80033ca:	e7d6      	b.n	800337a <_free_r+0x22>
 80033cc:	6820      	ldr	r0, [r4, #0]
 80033ce:	1821      	adds	r1, r4, r0
 80033d0:	428b      	cmp	r3, r1
 80033d2:	bf01      	itttt	eq
 80033d4:	6819      	ldreq	r1, [r3, #0]
 80033d6:	685b      	ldreq	r3, [r3, #4]
 80033d8:	1809      	addeq	r1, r1, r0
 80033da:	6021      	streq	r1, [r4, #0]
 80033dc:	6063      	str	r3, [r4, #4]
 80033de:	6054      	str	r4, [r2, #4]
 80033e0:	e7cb      	b.n	800337a <_free_r+0x22>
 80033e2:	bd38      	pop	{r3, r4, r5, pc}
 80033e4:	20000278 	.word	0x20000278

080033e8 <sbrk_aligned>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4e0f      	ldr	r6, [pc, #60]	@ (8003428 <sbrk_aligned+0x40>)
 80033ec:	460c      	mov	r4, r1
 80033ee:	6831      	ldr	r1, [r6, #0]
 80033f0:	4605      	mov	r5, r0
 80033f2:	b911      	cbnz	r1, 80033fa <sbrk_aligned+0x12>
 80033f4:	f000 fcb4 	bl	8003d60 <_sbrk_r>
 80033f8:	6030      	str	r0, [r6, #0]
 80033fa:	4621      	mov	r1, r4
 80033fc:	4628      	mov	r0, r5
 80033fe:	f000 fcaf 	bl	8003d60 <_sbrk_r>
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	d103      	bne.n	800340e <sbrk_aligned+0x26>
 8003406:	f04f 34ff 	mov.w	r4, #4294967295
 800340a:	4620      	mov	r0, r4
 800340c:	bd70      	pop	{r4, r5, r6, pc}
 800340e:	1cc4      	adds	r4, r0, #3
 8003410:	f024 0403 	bic.w	r4, r4, #3
 8003414:	42a0      	cmp	r0, r4
 8003416:	d0f8      	beq.n	800340a <sbrk_aligned+0x22>
 8003418:	1a21      	subs	r1, r4, r0
 800341a:	4628      	mov	r0, r5
 800341c:	f000 fca0 	bl	8003d60 <_sbrk_r>
 8003420:	3001      	adds	r0, #1
 8003422:	d1f2      	bne.n	800340a <sbrk_aligned+0x22>
 8003424:	e7ef      	b.n	8003406 <sbrk_aligned+0x1e>
 8003426:	bf00      	nop
 8003428:	20000274 	.word	0x20000274

0800342c <_malloc_r>:
 800342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003430:	1ccd      	adds	r5, r1, #3
 8003432:	f025 0503 	bic.w	r5, r5, #3
 8003436:	3508      	adds	r5, #8
 8003438:	2d0c      	cmp	r5, #12
 800343a:	bf38      	it	cc
 800343c:	250c      	movcc	r5, #12
 800343e:	2d00      	cmp	r5, #0
 8003440:	4606      	mov	r6, r0
 8003442:	db01      	blt.n	8003448 <_malloc_r+0x1c>
 8003444:	42a9      	cmp	r1, r5
 8003446:	d904      	bls.n	8003452 <_malloc_r+0x26>
 8003448:	230c      	movs	r3, #12
 800344a:	6033      	str	r3, [r6, #0]
 800344c:	2000      	movs	r0, #0
 800344e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003528 <_malloc_r+0xfc>
 8003456:	f000 f869 	bl	800352c <__malloc_lock>
 800345a:	f8d8 3000 	ldr.w	r3, [r8]
 800345e:	461c      	mov	r4, r3
 8003460:	bb44      	cbnz	r4, 80034b4 <_malloc_r+0x88>
 8003462:	4629      	mov	r1, r5
 8003464:	4630      	mov	r0, r6
 8003466:	f7ff ffbf 	bl	80033e8 <sbrk_aligned>
 800346a:	1c43      	adds	r3, r0, #1
 800346c:	4604      	mov	r4, r0
 800346e:	d158      	bne.n	8003522 <_malloc_r+0xf6>
 8003470:	f8d8 4000 	ldr.w	r4, [r8]
 8003474:	4627      	mov	r7, r4
 8003476:	2f00      	cmp	r7, #0
 8003478:	d143      	bne.n	8003502 <_malloc_r+0xd6>
 800347a:	2c00      	cmp	r4, #0
 800347c:	d04b      	beq.n	8003516 <_malloc_r+0xea>
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	4639      	mov	r1, r7
 8003482:	4630      	mov	r0, r6
 8003484:	eb04 0903 	add.w	r9, r4, r3
 8003488:	f000 fc6a 	bl	8003d60 <_sbrk_r>
 800348c:	4581      	cmp	r9, r0
 800348e:	d142      	bne.n	8003516 <_malloc_r+0xea>
 8003490:	6821      	ldr	r1, [r4, #0]
 8003492:	4630      	mov	r0, r6
 8003494:	1a6d      	subs	r5, r5, r1
 8003496:	4629      	mov	r1, r5
 8003498:	f7ff ffa6 	bl	80033e8 <sbrk_aligned>
 800349c:	3001      	adds	r0, #1
 800349e:	d03a      	beq.n	8003516 <_malloc_r+0xea>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	442b      	add	r3, r5
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	f8d8 3000 	ldr.w	r3, [r8]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	bb62      	cbnz	r2, 8003508 <_malloc_r+0xdc>
 80034ae:	f8c8 7000 	str.w	r7, [r8]
 80034b2:	e00f      	b.n	80034d4 <_malloc_r+0xa8>
 80034b4:	6822      	ldr	r2, [r4, #0]
 80034b6:	1b52      	subs	r2, r2, r5
 80034b8:	d420      	bmi.n	80034fc <_malloc_r+0xd0>
 80034ba:	2a0b      	cmp	r2, #11
 80034bc:	d917      	bls.n	80034ee <_malloc_r+0xc2>
 80034be:	1961      	adds	r1, r4, r5
 80034c0:	42a3      	cmp	r3, r4
 80034c2:	6025      	str	r5, [r4, #0]
 80034c4:	bf18      	it	ne
 80034c6:	6059      	strne	r1, [r3, #4]
 80034c8:	6863      	ldr	r3, [r4, #4]
 80034ca:	bf08      	it	eq
 80034cc:	f8c8 1000 	streq.w	r1, [r8]
 80034d0:	5162      	str	r2, [r4, r5]
 80034d2:	604b      	str	r3, [r1, #4]
 80034d4:	4630      	mov	r0, r6
 80034d6:	f000 f82f 	bl	8003538 <__malloc_unlock>
 80034da:	f104 000b 	add.w	r0, r4, #11
 80034de:	1d23      	adds	r3, r4, #4
 80034e0:	f020 0007 	bic.w	r0, r0, #7
 80034e4:	1ac2      	subs	r2, r0, r3
 80034e6:	bf1c      	itt	ne
 80034e8:	1a1b      	subne	r3, r3, r0
 80034ea:	50a3      	strne	r3, [r4, r2]
 80034ec:	e7af      	b.n	800344e <_malloc_r+0x22>
 80034ee:	6862      	ldr	r2, [r4, #4]
 80034f0:	42a3      	cmp	r3, r4
 80034f2:	bf0c      	ite	eq
 80034f4:	f8c8 2000 	streq.w	r2, [r8]
 80034f8:	605a      	strne	r2, [r3, #4]
 80034fa:	e7eb      	b.n	80034d4 <_malloc_r+0xa8>
 80034fc:	4623      	mov	r3, r4
 80034fe:	6864      	ldr	r4, [r4, #4]
 8003500:	e7ae      	b.n	8003460 <_malloc_r+0x34>
 8003502:	463c      	mov	r4, r7
 8003504:	687f      	ldr	r7, [r7, #4]
 8003506:	e7b6      	b.n	8003476 <_malloc_r+0x4a>
 8003508:	461a      	mov	r2, r3
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	42a3      	cmp	r3, r4
 800350e:	d1fb      	bne.n	8003508 <_malloc_r+0xdc>
 8003510:	2300      	movs	r3, #0
 8003512:	6053      	str	r3, [r2, #4]
 8003514:	e7de      	b.n	80034d4 <_malloc_r+0xa8>
 8003516:	230c      	movs	r3, #12
 8003518:	4630      	mov	r0, r6
 800351a:	6033      	str	r3, [r6, #0]
 800351c:	f000 f80c 	bl	8003538 <__malloc_unlock>
 8003520:	e794      	b.n	800344c <_malloc_r+0x20>
 8003522:	6005      	str	r5, [r0, #0]
 8003524:	e7d6      	b.n	80034d4 <_malloc_r+0xa8>
 8003526:	bf00      	nop
 8003528:	20000278 	.word	0x20000278

0800352c <__malloc_lock>:
 800352c:	4801      	ldr	r0, [pc, #4]	@ (8003534 <__malloc_lock+0x8>)
 800352e:	f7ff bf10 	b.w	8003352 <__retarget_lock_acquire_recursive>
 8003532:	bf00      	nop
 8003534:	20000270 	.word	0x20000270

08003538 <__malloc_unlock>:
 8003538:	4801      	ldr	r0, [pc, #4]	@ (8003540 <__malloc_unlock+0x8>)
 800353a:	f7ff bf0b 	b.w	8003354 <__retarget_lock_release_recursive>
 800353e:	bf00      	nop
 8003540:	20000270 	.word	0x20000270

08003544 <__sfputc_r>:
 8003544:	6893      	ldr	r3, [r2, #8]
 8003546:	b410      	push	{r4}
 8003548:	3b01      	subs	r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	6093      	str	r3, [r2, #8]
 800354e:	da07      	bge.n	8003560 <__sfputc_r+0x1c>
 8003550:	6994      	ldr	r4, [r2, #24]
 8003552:	42a3      	cmp	r3, r4
 8003554:	db01      	blt.n	800355a <__sfputc_r+0x16>
 8003556:	290a      	cmp	r1, #10
 8003558:	d102      	bne.n	8003560 <__sfputc_r+0x1c>
 800355a:	bc10      	pop	{r4}
 800355c:	f000 bb6c 	b.w	8003c38 <__swbuf_r>
 8003560:	6813      	ldr	r3, [r2, #0]
 8003562:	1c58      	adds	r0, r3, #1
 8003564:	6010      	str	r0, [r2, #0]
 8003566:	7019      	strb	r1, [r3, #0]
 8003568:	4608      	mov	r0, r1
 800356a:	bc10      	pop	{r4}
 800356c:	4770      	bx	lr

0800356e <__sfputs_r>:
 800356e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003570:	4606      	mov	r6, r0
 8003572:	460f      	mov	r7, r1
 8003574:	4614      	mov	r4, r2
 8003576:	18d5      	adds	r5, r2, r3
 8003578:	42ac      	cmp	r4, r5
 800357a:	d101      	bne.n	8003580 <__sfputs_r+0x12>
 800357c:	2000      	movs	r0, #0
 800357e:	e007      	b.n	8003590 <__sfputs_r+0x22>
 8003580:	463a      	mov	r2, r7
 8003582:	4630      	mov	r0, r6
 8003584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003588:	f7ff ffdc 	bl	8003544 <__sfputc_r>
 800358c:	1c43      	adds	r3, r0, #1
 800358e:	d1f3      	bne.n	8003578 <__sfputs_r+0xa>
 8003590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003594 <_vfiprintf_r>:
 8003594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003598:	460d      	mov	r5, r1
 800359a:	4614      	mov	r4, r2
 800359c:	4698      	mov	r8, r3
 800359e:	4606      	mov	r6, r0
 80035a0:	b09d      	sub	sp, #116	@ 0x74
 80035a2:	b118      	cbz	r0, 80035ac <_vfiprintf_r+0x18>
 80035a4:	6a03      	ldr	r3, [r0, #32]
 80035a6:	b90b      	cbnz	r3, 80035ac <_vfiprintf_r+0x18>
 80035a8:	f7ff fdce 	bl	8003148 <__sinit>
 80035ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035ae:	07d9      	lsls	r1, r3, #31
 80035b0:	d405      	bmi.n	80035be <_vfiprintf_r+0x2a>
 80035b2:	89ab      	ldrh	r3, [r5, #12]
 80035b4:	059a      	lsls	r2, r3, #22
 80035b6:	d402      	bmi.n	80035be <_vfiprintf_r+0x2a>
 80035b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035ba:	f7ff feca 	bl	8003352 <__retarget_lock_acquire_recursive>
 80035be:	89ab      	ldrh	r3, [r5, #12]
 80035c0:	071b      	lsls	r3, r3, #28
 80035c2:	d501      	bpl.n	80035c8 <_vfiprintf_r+0x34>
 80035c4:	692b      	ldr	r3, [r5, #16]
 80035c6:	b99b      	cbnz	r3, 80035f0 <_vfiprintf_r+0x5c>
 80035c8:	4629      	mov	r1, r5
 80035ca:	4630      	mov	r0, r6
 80035cc:	f000 fb72 	bl	8003cb4 <__swsetup_r>
 80035d0:	b170      	cbz	r0, 80035f0 <_vfiprintf_r+0x5c>
 80035d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80035d4:	07dc      	lsls	r4, r3, #31
 80035d6:	d504      	bpl.n	80035e2 <_vfiprintf_r+0x4e>
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	b01d      	add	sp, #116	@ 0x74
 80035de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e2:	89ab      	ldrh	r3, [r5, #12]
 80035e4:	0598      	lsls	r0, r3, #22
 80035e6:	d4f7      	bmi.n	80035d8 <_vfiprintf_r+0x44>
 80035e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80035ea:	f7ff feb3 	bl	8003354 <__retarget_lock_release_recursive>
 80035ee:	e7f3      	b.n	80035d8 <_vfiprintf_r+0x44>
 80035f0:	2300      	movs	r3, #0
 80035f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80035f4:	2320      	movs	r3, #32
 80035f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035fa:	2330      	movs	r3, #48	@ 0x30
 80035fc:	f04f 0901 	mov.w	r9, #1
 8003600:	f8cd 800c 	str.w	r8, [sp, #12]
 8003604:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80037b0 <_vfiprintf_r+0x21c>
 8003608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800360c:	4623      	mov	r3, r4
 800360e:	469a      	mov	sl, r3
 8003610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003614:	b10a      	cbz	r2, 800361a <_vfiprintf_r+0x86>
 8003616:	2a25      	cmp	r2, #37	@ 0x25
 8003618:	d1f9      	bne.n	800360e <_vfiprintf_r+0x7a>
 800361a:	ebba 0b04 	subs.w	fp, sl, r4
 800361e:	d00b      	beq.n	8003638 <_vfiprintf_r+0xa4>
 8003620:	465b      	mov	r3, fp
 8003622:	4622      	mov	r2, r4
 8003624:	4629      	mov	r1, r5
 8003626:	4630      	mov	r0, r6
 8003628:	f7ff ffa1 	bl	800356e <__sfputs_r>
 800362c:	3001      	adds	r0, #1
 800362e:	f000 80a7 	beq.w	8003780 <_vfiprintf_r+0x1ec>
 8003632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003634:	445a      	add	r2, fp
 8003636:	9209      	str	r2, [sp, #36]	@ 0x24
 8003638:	f89a 3000 	ldrb.w	r3, [sl]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 809f 	beq.w	8003780 <_vfiprintf_r+0x1ec>
 8003642:	2300      	movs	r3, #0
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800364c:	f10a 0a01 	add.w	sl, sl, #1
 8003650:	9304      	str	r3, [sp, #16]
 8003652:	9307      	str	r3, [sp, #28]
 8003654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003658:	931a      	str	r3, [sp, #104]	@ 0x68
 800365a:	4654      	mov	r4, sl
 800365c:	2205      	movs	r2, #5
 800365e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003662:	4853      	ldr	r0, [pc, #332]	@ (80037b0 <_vfiprintf_r+0x21c>)
 8003664:	f000 fb8c 	bl	8003d80 <memchr>
 8003668:	9a04      	ldr	r2, [sp, #16]
 800366a:	b9d8      	cbnz	r0, 80036a4 <_vfiprintf_r+0x110>
 800366c:	06d1      	lsls	r1, r2, #27
 800366e:	bf44      	itt	mi
 8003670:	2320      	movmi	r3, #32
 8003672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003676:	0713      	lsls	r3, r2, #28
 8003678:	bf44      	itt	mi
 800367a:	232b      	movmi	r3, #43	@ 0x2b
 800367c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003680:	f89a 3000 	ldrb.w	r3, [sl]
 8003684:	2b2a      	cmp	r3, #42	@ 0x2a
 8003686:	d015      	beq.n	80036b4 <_vfiprintf_r+0x120>
 8003688:	4654      	mov	r4, sl
 800368a:	2000      	movs	r0, #0
 800368c:	f04f 0c0a 	mov.w	ip, #10
 8003690:	9a07      	ldr	r2, [sp, #28]
 8003692:	4621      	mov	r1, r4
 8003694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003698:	3b30      	subs	r3, #48	@ 0x30
 800369a:	2b09      	cmp	r3, #9
 800369c:	d94b      	bls.n	8003736 <_vfiprintf_r+0x1a2>
 800369e:	b1b0      	cbz	r0, 80036ce <_vfiprintf_r+0x13a>
 80036a0:	9207      	str	r2, [sp, #28]
 80036a2:	e014      	b.n	80036ce <_vfiprintf_r+0x13a>
 80036a4:	eba0 0308 	sub.w	r3, r0, r8
 80036a8:	fa09 f303 	lsl.w	r3, r9, r3
 80036ac:	4313      	orrs	r3, r2
 80036ae:	46a2      	mov	sl, r4
 80036b0:	9304      	str	r3, [sp, #16]
 80036b2:	e7d2      	b.n	800365a <_vfiprintf_r+0xc6>
 80036b4:	9b03      	ldr	r3, [sp, #12]
 80036b6:	1d19      	adds	r1, r3, #4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	9103      	str	r1, [sp, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bfbb      	ittet	lt
 80036c0:	425b      	neglt	r3, r3
 80036c2:	f042 0202 	orrlt.w	r2, r2, #2
 80036c6:	9307      	strge	r3, [sp, #28]
 80036c8:	9307      	strlt	r3, [sp, #28]
 80036ca:	bfb8      	it	lt
 80036cc:	9204      	strlt	r2, [sp, #16]
 80036ce:	7823      	ldrb	r3, [r4, #0]
 80036d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80036d2:	d10a      	bne.n	80036ea <_vfiprintf_r+0x156>
 80036d4:	7863      	ldrb	r3, [r4, #1]
 80036d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d8:	d132      	bne.n	8003740 <_vfiprintf_r+0x1ac>
 80036da:	9b03      	ldr	r3, [sp, #12]
 80036dc:	3402      	adds	r4, #2
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	9203      	str	r2, [sp, #12]
 80036e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036e8:	9305      	str	r3, [sp, #20]
 80036ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80037b4 <_vfiprintf_r+0x220>
 80036ee:	2203      	movs	r2, #3
 80036f0:	4650      	mov	r0, sl
 80036f2:	7821      	ldrb	r1, [r4, #0]
 80036f4:	f000 fb44 	bl	8003d80 <memchr>
 80036f8:	b138      	cbz	r0, 800370a <_vfiprintf_r+0x176>
 80036fa:	2240      	movs	r2, #64	@ 0x40
 80036fc:	9b04      	ldr	r3, [sp, #16]
 80036fe:	eba0 000a 	sub.w	r0, r0, sl
 8003702:	4082      	lsls	r2, r0
 8003704:	4313      	orrs	r3, r2
 8003706:	3401      	adds	r4, #1
 8003708:	9304      	str	r3, [sp, #16]
 800370a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800370e:	2206      	movs	r2, #6
 8003710:	4829      	ldr	r0, [pc, #164]	@ (80037b8 <_vfiprintf_r+0x224>)
 8003712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003716:	f000 fb33 	bl	8003d80 <memchr>
 800371a:	2800      	cmp	r0, #0
 800371c:	d03f      	beq.n	800379e <_vfiprintf_r+0x20a>
 800371e:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <_vfiprintf_r+0x228>)
 8003720:	bb1b      	cbnz	r3, 800376a <_vfiprintf_r+0x1d6>
 8003722:	9b03      	ldr	r3, [sp, #12]
 8003724:	3307      	adds	r3, #7
 8003726:	f023 0307 	bic.w	r3, r3, #7
 800372a:	3308      	adds	r3, #8
 800372c:	9303      	str	r3, [sp, #12]
 800372e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003730:	443b      	add	r3, r7
 8003732:	9309      	str	r3, [sp, #36]	@ 0x24
 8003734:	e76a      	b.n	800360c <_vfiprintf_r+0x78>
 8003736:	460c      	mov	r4, r1
 8003738:	2001      	movs	r0, #1
 800373a:	fb0c 3202 	mla	r2, ip, r2, r3
 800373e:	e7a8      	b.n	8003692 <_vfiprintf_r+0xfe>
 8003740:	2300      	movs	r3, #0
 8003742:	f04f 0c0a 	mov.w	ip, #10
 8003746:	4619      	mov	r1, r3
 8003748:	3401      	adds	r4, #1
 800374a:	9305      	str	r3, [sp, #20]
 800374c:	4620      	mov	r0, r4
 800374e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003752:	3a30      	subs	r2, #48	@ 0x30
 8003754:	2a09      	cmp	r2, #9
 8003756:	d903      	bls.n	8003760 <_vfiprintf_r+0x1cc>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0c6      	beq.n	80036ea <_vfiprintf_r+0x156>
 800375c:	9105      	str	r1, [sp, #20]
 800375e:	e7c4      	b.n	80036ea <_vfiprintf_r+0x156>
 8003760:	4604      	mov	r4, r0
 8003762:	2301      	movs	r3, #1
 8003764:	fb0c 2101 	mla	r1, ip, r1, r2
 8003768:	e7f0      	b.n	800374c <_vfiprintf_r+0x1b8>
 800376a:	ab03      	add	r3, sp, #12
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	462a      	mov	r2, r5
 8003770:	4630      	mov	r0, r6
 8003772:	4b13      	ldr	r3, [pc, #76]	@ (80037c0 <_vfiprintf_r+0x22c>)
 8003774:	a904      	add	r1, sp, #16
 8003776:	f3af 8000 	nop.w
 800377a:	4607      	mov	r7, r0
 800377c:	1c78      	adds	r0, r7, #1
 800377e:	d1d6      	bne.n	800372e <_vfiprintf_r+0x19a>
 8003780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003782:	07d9      	lsls	r1, r3, #31
 8003784:	d405      	bmi.n	8003792 <_vfiprintf_r+0x1fe>
 8003786:	89ab      	ldrh	r3, [r5, #12]
 8003788:	059a      	lsls	r2, r3, #22
 800378a:	d402      	bmi.n	8003792 <_vfiprintf_r+0x1fe>
 800378c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800378e:	f7ff fde1 	bl	8003354 <__retarget_lock_release_recursive>
 8003792:	89ab      	ldrh	r3, [r5, #12]
 8003794:	065b      	lsls	r3, r3, #25
 8003796:	f53f af1f 	bmi.w	80035d8 <_vfiprintf_r+0x44>
 800379a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800379c:	e71e      	b.n	80035dc <_vfiprintf_r+0x48>
 800379e:	ab03      	add	r3, sp, #12
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	462a      	mov	r2, r5
 80037a4:	4630      	mov	r0, r6
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <_vfiprintf_r+0x22c>)
 80037a8:	a904      	add	r1, sp, #16
 80037aa:	f000 f87d 	bl	80038a8 <_printf_i>
 80037ae:	e7e4      	b.n	800377a <_vfiprintf_r+0x1e6>
 80037b0:	08003f1e 	.word	0x08003f1e
 80037b4:	08003f24 	.word	0x08003f24
 80037b8:	08003f28 	.word	0x08003f28
 80037bc:	00000000 	.word	0x00000000
 80037c0:	0800356f 	.word	0x0800356f

080037c4 <_printf_common>:
 80037c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037c8:	4616      	mov	r6, r2
 80037ca:	4698      	mov	r8, r3
 80037cc:	688a      	ldr	r2, [r1, #8]
 80037ce:	690b      	ldr	r3, [r1, #16]
 80037d0:	4607      	mov	r7, r0
 80037d2:	4293      	cmp	r3, r2
 80037d4:	bfb8      	it	lt
 80037d6:	4613      	movlt	r3, r2
 80037d8:	6033      	str	r3, [r6, #0]
 80037da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037de:	460c      	mov	r4, r1
 80037e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037e4:	b10a      	cbz	r2, 80037ea <_printf_common+0x26>
 80037e6:	3301      	adds	r3, #1
 80037e8:	6033      	str	r3, [r6, #0]
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	0699      	lsls	r1, r3, #26
 80037ee:	bf42      	ittt	mi
 80037f0:	6833      	ldrmi	r3, [r6, #0]
 80037f2:	3302      	addmi	r3, #2
 80037f4:	6033      	strmi	r3, [r6, #0]
 80037f6:	6825      	ldr	r5, [r4, #0]
 80037f8:	f015 0506 	ands.w	r5, r5, #6
 80037fc:	d106      	bne.n	800380c <_printf_common+0x48>
 80037fe:	f104 0a19 	add.w	sl, r4, #25
 8003802:	68e3      	ldr	r3, [r4, #12]
 8003804:	6832      	ldr	r2, [r6, #0]
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	42ab      	cmp	r3, r5
 800380a:	dc2b      	bgt.n	8003864 <_printf_common+0xa0>
 800380c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003810:	6822      	ldr	r2, [r4, #0]
 8003812:	3b00      	subs	r3, #0
 8003814:	bf18      	it	ne
 8003816:	2301      	movne	r3, #1
 8003818:	0692      	lsls	r2, r2, #26
 800381a:	d430      	bmi.n	800387e <_printf_common+0xba>
 800381c:	4641      	mov	r1, r8
 800381e:	4638      	mov	r0, r7
 8003820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003824:	47c8      	blx	r9
 8003826:	3001      	adds	r0, #1
 8003828:	d023      	beq.n	8003872 <_printf_common+0xae>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	6922      	ldr	r2, [r4, #16]
 800382e:	f003 0306 	and.w	r3, r3, #6
 8003832:	2b04      	cmp	r3, #4
 8003834:	bf14      	ite	ne
 8003836:	2500      	movne	r5, #0
 8003838:	6833      	ldreq	r3, [r6, #0]
 800383a:	f04f 0600 	mov.w	r6, #0
 800383e:	bf08      	it	eq
 8003840:	68e5      	ldreq	r5, [r4, #12]
 8003842:	f104 041a 	add.w	r4, r4, #26
 8003846:	bf08      	it	eq
 8003848:	1aed      	subeq	r5, r5, r3
 800384a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800384e:	bf08      	it	eq
 8003850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003854:	4293      	cmp	r3, r2
 8003856:	bfc4      	itt	gt
 8003858:	1a9b      	subgt	r3, r3, r2
 800385a:	18ed      	addgt	r5, r5, r3
 800385c:	42b5      	cmp	r5, r6
 800385e:	d11a      	bne.n	8003896 <_printf_common+0xd2>
 8003860:	2000      	movs	r0, #0
 8003862:	e008      	b.n	8003876 <_printf_common+0xb2>
 8003864:	2301      	movs	r3, #1
 8003866:	4652      	mov	r2, sl
 8003868:	4641      	mov	r1, r8
 800386a:	4638      	mov	r0, r7
 800386c:	47c8      	blx	r9
 800386e:	3001      	adds	r0, #1
 8003870:	d103      	bne.n	800387a <_printf_common+0xb6>
 8003872:	f04f 30ff 	mov.w	r0, #4294967295
 8003876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800387a:	3501      	adds	r5, #1
 800387c:	e7c1      	b.n	8003802 <_printf_common+0x3e>
 800387e:	2030      	movs	r0, #48	@ 0x30
 8003880:	18e1      	adds	r1, r4, r3
 8003882:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003886:	1c5a      	adds	r2, r3, #1
 8003888:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800388c:	4422      	add	r2, r4
 800388e:	3302      	adds	r3, #2
 8003890:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003894:	e7c2      	b.n	800381c <_printf_common+0x58>
 8003896:	2301      	movs	r3, #1
 8003898:	4622      	mov	r2, r4
 800389a:	4641      	mov	r1, r8
 800389c:	4638      	mov	r0, r7
 800389e:	47c8      	blx	r9
 80038a0:	3001      	adds	r0, #1
 80038a2:	d0e6      	beq.n	8003872 <_printf_common+0xae>
 80038a4:	3601      	adds	r6, #1
 80038a6:	e7d9      	b.n	800385c <_printf_common+0x98>

080038a8 <_printf_i>:
 80038a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	7e0f      	ldrb	r7, [r1, #24]
 80038ae:	4691      	mov	r9, r2
 80038b0:	2f78      	cmp	r7, #120	@ 0x78
 80038b2:	4680      	mov	r8, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	469a      	mov	sl, r3
 80038b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80038ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80038be:	d807      	bhi.n	80038d0 <_printf_i+0x28>
 80038c0:	2f62      	cmp	r7, #98	@ 0x62
 80038c2:	d80a      	bhi.n	80038da <_printf_i+0x32>
 80038c4:	2f00      	cmp	r7, #0
 80038c6:	f000 80d3 	beq.w	8003a70 <_printf_i+0x1c8>
 80038ca:	2f58      	cmp	r7, #88	@ 0x58
 80038cc:	f000 80ba 	beq.w	8003a44 <_printf_i+0x19c>
 80038d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038d8:	e03a      	b.n	8003950 <_printf_i+0xa8>
 80038da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038de:	2b15      	cmp	r3, #21
 80038e0:	d8f6      	bhi.n	80038d0 <_printf_i+0x28>
 80038e2:	a101      	add	r1, pc, #4	@ (adr r1, 80038e8 <_printf_i+0x40>)
 80038e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038e8:	08003941 	.word	0x08003941
 80038ec:	08003955 	.word	0x08003955
 80038f0:	080038d1 	.word	0x080038d1
 80038f4:	080038d1 	.word	0x080038d1
 80038f8:	080038d1 	.word	0x080038d1
 80038fc:	080038d1 	.word	0x080038d1
 8003900:	08003955 	.word	0x08003955
 8003904:	080038d1 	.word	0x080038d1
 8003908:	080038d1 	.word	0x080038d1
 800390c:	080038d1 	.word	0x080038d1
 8003910:	080038d1 	.word	0x080038d1
 8003914:	08003a57 	.word	0x08003a57
 8003918:	0800397f 	.word	0x0800397f
 800391c:	08003a11 	.word	0x08003a11
 8003920:	080038d1 	.word	0x080038d1
 8003924:	080038d1 	.word	0x080038d1
 8003928:	08003a79 	.word	0x08003a79
 800392c:	080038d1 	.word	0x080038d1
 8003930:	0800397f 	.word	0x0800397f
 8003934:	080038d1 	.word	0x080038d1
 8003938:	080038d1 	.word	0x080038d1
 800393c:	08003a19 	.word	0x08003a19
 8003940:	6833      	ldr	r3, [r6, #0]
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6032      	str	r2, [r6, #0]
 8003948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800394c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003950:	2301      	movs	r3, #1
 8003952:	e09e      	b.n	8003a92 <_printf_i+0x1ea>
 8003954:	6833      	ldr	r3, [r6, #0]
 8003956:	6820      	ldr	r0, [r4, #0]
 8003958:	1d19      	adds	r1, r3, #4
 800395a:	6031      	str	r1, [r6, #0]
 800395c:	0606      	lsls	r6, r0, #24
 800395e:	d501      	bpl.n	8003964 <_printf_i+0xbc>
 8003960:	681d      	ldr	r5, [r3, #0]
 8003962:	e003      	b.n	800396c <_printf_i+0xc4>
 8003964:	0645      	lsls	r5, r0, #25
 8003966:	d5fb      	bpl.n	8003960 <_printf_i+0xb8>
 8003968:	f9b3 5000 	ldrsh.w	r5, [r3]
 800396c:	2d00      	cmp	r5, #0
 800396e:	da03      	bge.n	8003978 <_printf_i+0xd0>
 8003970:	232d      	movs	r3, #45	@ 0x2d
 8003972:	426d      	negs	r5, r5
 8003974:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003978:	230a      	movs	r3, #10
 800397a:	4859      	ldr	r0, [pc, #356]	@ (8003ae0 <_printf_i+0x238>)
 800397c:	e011      	b.n	80039a2 <_printf_i+0xfa>
 800397e:	6821      	ldr	r1, [r4, #0]
 8003980:	6833      	ldr	r3, [r6, #0]
 8003982:	0608      	lsls	r0, r1, #24
 8003984:	f853 5b04 	ldr.w	r5, [r3], #4
 8003988:	d402      	bmi.n	8003990 <_printf_i+0xe8>
 800398a:	0649      	lsls	r1, r1, #25
 800398c:	bf48      	it	mi
 800398e:	b2ad      	uxthmi	r5, r5
 8003990:	2f6f      	cmp	r7, #111	@ 0x6f
 8003992:	6033      	str	r3, [r6, #0]
 8003994:	bf14      	ite	ne
 8003996:	230a      	movne	r3, #10
 8003998:	2308      	moveq	r3, #8
 800399a:	4851      	ldr	r0, [pc, #324]	@ (8003ae0 <_printf_i+0x238>)
 800399c:	2100      	movs	r1, #0
 800399e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80039a2:	6866      	ldr	r6, [r4, #4]
 80039a4:	2e00      	cmp	r6, #0
 80039a6:	bfa8      	it	ge
 80039a8:	6821      	ldrge	r1, [r4, #0]
 80039aa:	60a6      	str	r6, [r4, #8]
 80039ac:	bfa4      	itt	ge
 80039ae:	f021 0104 	bicge.w	r1, r1, #4
 80039b2:	6021      	strge	r1, [r4, #0]
 80039b4:	b90d      	cbnz	r5, 80039ba <_printf_i+0x112>
 80039b6:	2e00      	cmp	r6, #0
 80039b8:	d04b      	beq.n	8003a52 <_printf_i+0x1aa>
 80039ba:	4616      	mov	r6, r2
 80039bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80039c0:	fb03 5711 	mls	r7, r3, r1, r5
 80039c4:	5dc7      	ldrb	r7, [r0, r7]
 80039c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039ca:	462f      	mov	r7, r5
 80039cc:	42bb      	cmp	r3, r7
 80039ce:	460d      	mov	r5, r1
 80039d0:	d9f4      	bls.n	80039bc <_printf_i+0x114>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d10b      	bne.n	80039ee <_printf_i+0x146>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	07df      	lsls	r7, r3, #31
 80039da:	d508      	bpl.n	80039ee <_printf_i+0x146>
 80039dc:	6923      	ldr	r3, [r4, #16]
 80039de:	6861      	ldr	r1, [r4, #4]
 80039e0:	4299      	cmp	r1, r3
 80039e2:	bfde      	ittt	le
 80039e4:	2330      	movle	r3, #48	@ 0x30
 80039e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039ee:	1b92      	subs	r2, r2, r6
 80039f0:	6122      	str	r2, [r4, #16]
 80039f2:	464b      	mov	r3, r9
 80039f4:	4621      	mov	r1, r4
 80039f6:	4640      	mov	r0, r8
 80039f8:	f8cd a000 	str.w	sl, [sp]
 80039fc:	aa03      	add	r2, sp, #12
 80039fe:	f7ff fee1 	bl	80037c4 <_printf_common>
 8003a02:	3001      	adds	r0, #1
 8003a04:	d14a      	bne.n	8003a9c <_printf_i+0x1f4>
 8003a06:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0a:	b004      	add	sp, #16
 8003a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a10:	6823      	ldr	r3, [r4, #0]
 8003a12:	f043 0320 	orr.w	r3, r3, #32
 8003a16:	6023      	str	r3, [r4, #0]
 8003a18:	2778      	movs	r7, #120	@ 0x78
 8003a1a:	4832      	ldr	r0, [pc, #200]	@ (8003ae4 <_printf_i+0x23c>)
 8003a1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	6831      	ldr	r1, [r6, #0]
 8003a24:	061f      	lsls	r7, r3, #24
 8003a26:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a2a:	d402      	bmi.n	8003a32 <_printf_i+0x18a>
 8003a2c:	065f      	lsls	r7, r3, #25
 8003a2e:	bf48      	it	mi
 8003a30:	b2ad      	uxthmi	r5, r5
 8003a32:	6031      	str	r1, [r6, #0]
 8003a34:	07d9      	lsls	r1, r3, #31
 8003a36:	bf44      	itt	mi
 8003a38:	f043 0320 	orrmi.w	r3, r3, #32
 8003a3c:	6023      	strmi	r3, [r4, #0]
 8003a3e:	b11d      	cbz	r5, 8003a48 <_printf_i+0x1a0>
 8003a40:	2310      	movs	r3, #16
 8003a42:	e7ab      	b.n	800399c <_printf_i+0xf4>
 8003a44:	4826      	ldr	r0, [pc, #152]	@ (8003ae0 <_printf_i+0x238>)
 8003a46:	e7e9      	b.n	8003a1c <_printf_i+0x174>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	f023 0320 	bic.w	r3, r3, #32
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	e7f6      	b.n	8003a40 <_printf_i+0x198>
 8003a52:	4616      	mov	r6, r2
 8003a54:	e7bd      	b.n	80039d2 <_printf_i+0x12a>
 8003a56:	6833      	ldr	r3, [r6, #0]
 8003a58:	6825      	ldr	r5, [r4, #0]
 8003a5a:	1d18      	adds	r0, r3, #4
 8003a5c:	6961      	ldr	r1, [r4, #20]
 8003a5e:	6030      	str	r0, [r6, #0]
 8003a60:	062e      	lsls	r6, r5, #24
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	d501      	bpl.n	8003a6a <_printf_i+0x1c2>
 8003a66:	6019      	str	r1, [r3, #0]
 8003a68:	e002      	b.n	8003a70 <_printf_i+0x1c8>
 8003a6a:	0668      	lsls	r0, r5, #25
 8003a6c:	d5fb      	bpl.n	8003a66 <_printf_i+0x1be>
 8003a6e:	8019      	strh	r1, [r3, #0]
 8003a70:	2300      	movs	r3, #0
 8003a72:	4616      	mov	r6, r2
 8003a74:	6123      	str	r3, [r4, #16]
 8003a76:	e7bc      	b.n	80039f2 <_printf_i+0x14a>
 8003a78:	6833      	ldr	r3, [r6, #0]
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	1d1a      	adds	r2, r3, #4
 8003a7e:	6032      	str	r2, [r6, #0]
 8003a80:	681e      	ldr	r6, [r3, #0]
 8003a82:	6862      	ldr	r2, [r4, #4]
 8003a84:	4630      	mov	r0, r6
 8003a86:	f000 f97b 	bl	8003d80 <memchr>
 8003a8a:	b108      	cbz	r0, 8003a90 <_printf_i+0x1e8>
 8003a8c:	1b80      	subs	r0, r0, r6
 8003a8e:	6060      	str	r0, [r4, #4]
 8003a90:	6863      	ldr	r3, [r4, #4]
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	2300      	movs	r3, #0
 8003a96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a9a:	e7aa      	b.n	80039f2 <_printf_i+0x14a>
 8003a9c:	4632      	mov	r2, r6
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	6923      	ldr	r3, [r4, #16]
 8003aa4:	47d0      	blx	sl
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d0ad      	beq.n	8003a06 <_printf_i+0x15e>
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	079b      	lsls	r3, r3, #30
 8003aae:	d413      	bmi.n	8003ad8 <_printf_i+0x230>
 8003ab0:	68e0      	ldr	r0, [r4, #12]
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	4298      	cmp	r0, r3
 8003ab6:	bfb8      	it	lt
 8003ab8:	4618      	movlt	r0, r3
 8003aba:	e7a6      	b.n	8003a0a <_printf_i+0x162>
 8003abc:	2301      	movs	r3, #1
 8003abe:	4632      	mov	r2, r6
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	4640      	mov	r0, r8
 8003ac4:	47d0      	blx	sl
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d09d      	beq.n	8003a06 <_printf_i+0x15e>
 8003aca:	3501      	adds	r5, #1
 8003acc:	68e3      	ldr	r3, [r4, #12]
 8003ace:	9903      	ldr	r1, [sp, #12]
 8003ad0:	1a5b      	subs	r3, r3, r1
 8003ad2:	42ab      	cmp	r3, r5
 8003ad4:	dcf2      	bgt.n	8003abc <_printf_i+0x214>
 8003ad6:	e7eb      	b.n	8003ab0 <_printf_i+0x208>
 8003ad8:	2500      	movs	r5, #0
 8003ada:	f104 0619 	add.w	r6, r4, #25
 8003ade:	e7f5      	b.n	8003acc <_printf_i+0x224>
 8003ae0:	08003f2f 	.word	0x08003f2f
 8003ae4:	08003f40 	.word	0x08003f40

08003ae8 <__sflush_r>:
 8003ae8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	0716      	lsls	r6, r2, #28
 8003af0:	4605      	mov	r5, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	d454      	bmi.n	8003ba0 <__sflush_r+0xb8>
 8003af6:	684b      	ldr	r3, [r1, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dc02      	bgt.n	8003b02 <__sflush_r+0x1a>
 8003afc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dd48      	ble.n	8003b94 <__sflush_r+0xac>
 8003b02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b04:	2e00      	cmp	r6, #0
 8003b06:	d045      	beq.n	8003b94 <__sflush_r+0xac>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003b0e:	682f      	ldr	r7, [r5, #0]
 8003b10:	6a21      	ldr	r1, [r4, #32]
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	d030      	beq.n	8003b78 <__sflush_r+0x90>
 8003b16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	0759      	lsls	r1, r3, #29
 8003b1c:	d505      	bpl.n	8003b2a <__sflush_r+0x42>
 8003b1e:	6863      	ldr	r3, [r4, #4]
 8003b20:	1ad2      	subs	r2, r2, r3
 8003b22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003b24:	b10b      	cbz	r3, 8003b2a <__sflush_r+0x42>
 8003b26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4628      	mov	r0, r5
 8003b2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003b30:	6a21      	ldr	r1, [r4, #32]
 8003b32:	47b0      	blx	r6
 8003b34:	1c43      	adds	r3, r0, #1
 8003b36:	89a3      	ldrh	r3, [r4, #12]
 8003b38:	d106      	bne.n	8003b48 <__sflush_r+0x60>
 8003b3a:	6829      	ldr	r1, [r5, #0]
 8003b3c:	291d      	cmp	r1, #29
 8003b3e:	d82b      	bhi.n	8003b98 <__sflush_r+0xb0>
 8003b40:	4a28      	ldr	r2, [pc, #160]	@ (8003be4 <__sflush_r+0xfc>)
 8003b42:	410a      	asrs	r2, r1
 8003b44:	07d6      	lsls	r6, r2, #31
 8003b46:	d427      	bmi.n	8003b98 <__sflush_r+0xb0>
 8003b48:	2200      	movs	r2, #0
 8003b4a:	6062      	str	r2, [r4, #4]
 8003b4c:	6922      	ldr	r2, [r4, #16]
 8003b4e:	04d9      	lsls	r1, r3, #19
 8003b50:	6022      	str	r2, [r4, #0]
 8003b52:	d504      	bpl.n	8003b5e <__sflush_r+0x76>
 8003b54:	1c42      	adds	r2, r0, #1
 8003b56:	d101      	bne.n	8003b5c <__sflush_r+0x74>
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	b903      	cbnz	r3, 8003b5e <__sflush_r+0x76>
 8003b5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8003b5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b60:	602f      	str	r7, [r5, #0]
 8003b62:	b1b9      	cbz	r1, 8003b94 <__sflush_r+0xac>
 8003b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b68:	4299      	cmp	r1, r3
 8003b6a:	d002      	beq.n	8003b72 <__sflush_r+0x8a>
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f7ff fbf3 	bl	8003358 <_free_r>
 8003b72:	2300      	movs	r3, #0
 8003b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b76:	e00d      	b.n	8003b94 <__sflush_r+0xac>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4628      	mov	r0, r5
 8003b7c:	47b0      	blx	r6
 8003b7e:	4602      	mov	r2, r0
 8003b80:	1c50      	adds	r0, r2, #1
 8003b82:	d1c9      	bne.n	8003b18 <__sflush_r+0x30>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0c6      	beq.n	8003b18 <__sflush_r+0x30>
 8003b8a:	2b1d      	cmp	r3, #29
 8003b8c:	d001      	beq.n	8003b92 <__sflush_r+0xaa>
 8003b8e:	2b16      	cmp	r3, #22
 8003b90:	d11d      	bne.n	8003bce <__sflush_r+0xe6>
 8003b92:	602f      	str	r7, [r5, #0]
 8003b94:	2000      	movs	r0, #0
 8003b96:	e021      	b.n	8003bdc <__sflush_r+0xf4>
 8003b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b9c:	b21b      	sxth	r3, r3
 8003b9e:	e01a      	b.n	8003bd6 <__sflush_r+0xee>
 8003ba0:	690f      	ldr	r7, [r1, #16]
 8003ba2:	2f00      	cmp	r7, #0
 8003ba4:	d0f6      	beq.n	8003b94 <__sflush_r+0xac>
 8003ba6:	0793      	lsls	r3, r2, #30
 8003ba8:	bf18      	it	ne
 8003baa:	2300      	movne	r3, #0
 8003bac:	680e      	ldr	r6, [r1, #0]
 8003bae:	bf08      	it	eq
 8003bb0:	694b      	ldreq	r3, [r1, #20]
 8003bb2:	1bf6      	subs	r6, r6, r7
 8003bb4:	600f      	str	r7, [r1, #0]
 8003bb6:	608b      	str	r3, [r1, #8]
 8003bb8:	2e00      	cmp	r6, #0
 8003bba:	ddeb      	ble.n	8003b94 <__sflush_r+0xac>
 8003bbc:	4633      	mov	r3, r6
 8003bbe:	463a      	mov	r2, r7
 8003bc0:	4628      	mov	r0, r5
 8003bc2:	6a21      	ldr	r1, [r4, #32]
 8003bc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003bc8:	47e0      	blx	ip
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	dc07      	bgt.n	8003bde <__sflush_r+0xf6>
 8003bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bda:	81a3      	strh	r3, [r4, #12]
 8003bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bde:	4407      	add	r7, r0
 8003be0:	1a36      	subs	r6, r6, r0
 8003be2:	e7e9      	b.n	8003bb8 <__sflush_r+0xd0>
 8003be4:	dfbffffe 	.word	0xdfbffffe

08003be8 <_fflush_r>:
 8003be8:	b538      	push	{r3, r4, r5, lr}
 8003bea:	690b      	ldr	r3, [r1, #16]
 8003bec:	4605      	mov	r5, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	b913      	cbnz	r3, 8003bf8 <_fflush_r+0x10>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	b118      	cbz	r0, 8003c02 <_fflush_r+0x1a>
 8003bfa:	6a03      	ldr	r3, [r0, #32]
 8003bfc:	b90b      	cbnz	r3, 8003c02 <_fflush_r+0x1a>
 8003bfe:	f7ff faa3 	bl	8003148 <__sinit>
 8003c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f3      	beq.n	8003bf2 <_fflush_r+0xa>
 8003c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003c0c:	07d0      	lsls	r0, r2, #31
 8003c0e:	d404      	bmi.n	8003c1a <_fflush_r+0x32>
 8003c10:	0599      	lsls	r1, r3, #22
 8003c12:	d402      	bmi.n	8003c1a <_fflush_r+0x32>
 8003c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c16:	f7ff fb9c 	bl	8003352 <__retarget_lock_acquire_recursive>
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	f7ff ff63 	bl	8003ae8 <__sflush_r>
 8003c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003c24:	4605      	mov	r5, r0
 8003c26:	07da      	lsls	r2, r3, #31
 8003c28:	d4e4      	bmi.n	8003bf4 <_fflush_r+0xc>
 8003c2a:	89a3      	ldrh	r3, [r4, #12]
 8003c2c:	059b      	lsls	r3, r3, #22
 8003c2e:	d4e1      	bmi.n	8003bf4 <_fflush_r+0xc>
 8003c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003c32:	f7ff fb8f 	bl	8003354 <__retarget_lock_release_recursive>
 8003c36:	e7dd      	b.n	8003bf4 <_fflush_r+0xc>

08003c38 <__swbuf_r>:
 8003c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3a:	460e      	mov	r6, r1
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	4605      	mov	r5, r0
 8003c40:	b118      	cbz	r0, 8003c4a <__swbuf_r+0x12>
 8003c42:	6a03      	ldr	r3, [r0, #32]
 8003c44:	b90b      	cbnz	r3, 8003c4a <__swbuf_r+0x12>
 8003c46:	f7ff fa7f 	bl	8003148 <__sinit>
 8003c4a:	69a3      	ldr	r3, [r4, #24]
 8003c4c:	60a3      	str	r3, [r4, #8]
 8003c4e:	89a3      	ldrh	r3, [r4, #12]
 8003c50:	071a      	lsls	r2, r3, #28
 8003c52:	d501      	bpl.n	8003c58 <__swbuf_r+0x20>
 8003c54:	6923      	ldr	r3, [r4, #16]
 8003c56:	b943      	cbnz	r3, 8003c6a <__swbuf_r+0x32>
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	f000 f82a 	bl	8003cb4 <__swsetup_r>
 8003c60:	b118      	cbz	r0, 8003c6a <__swbuf_r+0x32>
 8003c62:	f04f 37ff 	mov.w	r7, #4294967295
 8003c66:	4638      	mov	r0, r7
 8003c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	6922      	ldr	r2, [r4, #16]
 8003c6e:	b2f6      	uxtb	r6, r6
 8003c70:	1a98      	subs	r0, r3, r2
 8003c72:	6963      	ldr	r3, [r4, #20]
 8003c74:	4637      	mov	r7, r6
 8003c76:	4283      	cmp	r3, r0
 8003c78:	dc05      	bgt.n	8003c86 <__swbuf_r+0x4e>
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7ff ffb3 	bl	8003be8 <_fflush_r>
 8003c82:	2800      	cmp	r0, #0
 8003c84:	d1ed      	bne.n	8003c62 <__swbuf_r+0x2a>
 8003c86:	68a3      	ldr	r3, [r4, #8]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	60a3      	str	r3, [r4, #8]
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	6022      	str	r2, [r4, #0]
 8003c92:	701e      	strb	r6, [r3, #0]
 8003c94:	6962      	ldr	r2, [r4, #20]
 8003c96:	1c43      	adds	r3, r0, #1
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d004      	beq.n	8003ca6 <__swbuf_r+0x6e>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	07db      	lsls	r3, r3, #31
 8003ca0:	d5e1      	bpl.n	8003c66 <__swbuf_r+0x2e>
 8003ca2:	2e0a      	cmp	r6, #10
 8003ca4:	d1df      	bne.n	8003c66 <__swbuf_r+0x2e>
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f7ff ff9d 	bl	8003be8 <_fflush_r>
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0d9      	beq.n	8003c66 <__swbuf_r+0x2e>
 8003cb2:	e7d6      	b.n	8003c62 <__swbuf_r+0x2a>

08003cb4 <__swsetup_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4b29      	ldr	r3, [pc, #164]	@ (8003d5c <__swsetup_r+0xa8>)
 8003cb8:	4605      	mov	r5, r0
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	b118      	cbz	r0, 8003cc8 <__swsetup_r+0x14>
 8003cc0:	6a03      	ldr	r3, [r0, #32]
 8003cc2:	b90b      	cbnz	r3, 8003cc8 <__swsetup_r+0x14>
 8003cc4:	f7ff fa40 	bl	8003148 <__sinit>
 8003cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ccc:	0719      	lsls	r1, r3, #28
 8003cce:	d422      	bmi.n	8003d16 <__swsetup_r+0x62>
 8003cd0:	06da      	lsls	r2, r3, #27
 8003cd2:	d407      	bmi.n	8003ce4 <__swsetup_r+0x30>
 8003cd4:	2209      	movs	r2, #9
 8003cd6:	602a      	str	r2, [r5, #0]
 8003cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	81a3      	strh	r3, [r4, #12]
 8003ce2:	e033      	b.n	8003d4c <__swsetup_r+0x98>
 8003ce4:	0758      	lsls	r0, r3, #29
 8003ce6:	d512      	bpl.n	8003d0e <__swsetup_r+0x5a>
 8003ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003cea:	b141      	cbz	r1, 8003cfe <__swsetup_r+0x4a>
 8003cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003cf0:	4299      	cmp	r1, r3
 8003cf2:	d002      	beq.n	8003cfa <__swsetup_r+0x46>
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	f7ff fb2f 	bl	8003358 <_free_r>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003cfe:	89a3      	ldrh	r3, [r4, #12]
 8003d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	2300      	movs	r3, #0
 8003d08:	6063      	str	r3, [r4, #4]
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	89a3      	ldrh	r3, [r4, #12]
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	81a3      	strh	r3, [r4, #12]
 8003d16:	6923      	ldr	r3, [r4, #16]
 8003d18:	b94b      	cbnz	r3, 8003d2e <__swsetup_r+0x7a>
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d24:	d003      	beq.n	8003d2e <__swsetup_r+0x7a>
 8003d26:	4621      	mov	r1, r4
 8003d28:	4628      	mov	r0, r5
 8003d2a:	f000 f85c 	bl	8003de6 <__smakebuf_r>
 8003d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d32:	f013 0201 	ands.w	r2, r3, #1
 8003d36:	d00a      	beq.n	8003d4e <__swsetup_r+0x9a>
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60a2      	str	r2, [r4, #8]
 8003d3c:	6962      	ldr	r2, [r4, #20]
 8003d3e:	4252      	negs	r2, r2
 8003d40:	61a2      	str	r2, [r4, #24]
 8003d42:	6922      	ldr	r2, [r4, #16]
 8003d44:	b942      	cbnz	r2, 8003d58 <__swsetup_r+0xa4>
 8003d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d4a:	d1c5      	bne.n	8003cd8 <__swsetup_r+0x24>
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
 8003d4e:	0799      	lsls	r1, r3, #30
 8003d50:	bf58      	it	pl
 8003d52:	6962      	ldrpl	r2, [r4, #20]
 8003d54:	60a2      	str	r2, [r4, #8]
 8003d56:	e7f4      	b.n	8003d42 <__swsetup_r+0x8e>
 8003d58:	2000      	movs	r0, #0
 8003d5a:	e7f7      	b.n	8003d4c <__swsetup_r+0x98>
 8003d5c:	20000018 	.word	0x20000018

08003d60 <_sbrk_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	2300      	movs	r3, #0
 8003d64:	4d05      	ldr	r5, [pc, #20]	@ (8003d7c <_sbrk_r+0x1c>)
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	f7fd fac8 	bl	8001300 <_sbrk>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_sbrk_r+0x1a>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_sbrk_r+0x1a>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	2000026c 	.word	0x2000026c

08003d80 <memchr>:
 8003d80:	4603      	mov	r3, r0
 8003d82:	b510      	push	{r4, lr}
 8003d84:	b2c9      	uxtb	r1, r1
 8003d86:	4402      	add	r2, r0
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	d101      	bne.n	8003d92 <memchr+0x12>
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e003      	b.n	8003d9a <memchr+0x1a>
 8003d92:	7804      	ldrb	r4, [r0, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	428c      	cmp	r4, r1
 8003d98:	d1f6      	bne.n	8003d88 <memchr+0x8>
 8003d9a:	bd10      	pop	{r4, pc}

08003d9c <__swhatbuf_r>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	460c      	mov	r4, r1
 8003da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da4:	4615      	mov	r5, r2
 8003da6:	2900      	cmp	r1, #0
 8003da8:	461e      	mov	r6, r3
 8003daa:	b096      	sub	sp, #88	@ 0x58
 8003dac:	da0c      	bge.n	8003dc8 <__swhatbuf_r+0x2c>
 8003dae:	89a3      	ldrh	r3, [r4, #12]
 8003db0:	2100      	movs	r1, #0
 8003db2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003db6:	bf14      	ite	ne
 8003db8:	2340      	movne	r3, #64	@ 0x40
 8003dba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	6031      	str	r1, [r6, #0]
 8003dc2:	602b      	str	r3, [r5, #0]
 8003dc4:	b016      	add	sp, #88	@ 0x58
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}
 8003dc8:	466a      	mov	r2, sp
 8003dca:	f000 f849 	bl	8003e60 <_fstat_r>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	dbed      	blt.n	8003dae <__swhatbuf_r+0x12>
 8003dd2:	9901      	ldr	r1, [sp, #4]
 8003dd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003dd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ddc:	4259      	negs	r1, r3
 8003dde:	4159      	adcs	r1, r3
 8003de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003de4:	e7eb      	b.n	8003dbe <__swhatbuf_r+0x22>

08003de6 <__smakebuf_r>:
 8003de6:	898b      	ldrh	r3, [r1, #12]
 8003de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dea:	079d      	lsls	r5, r3, #30
 8003dec:	4606      	mov	r6, r0
 8003dee:	460c      	mov	r4, r1
 8003df0:	d507      	bpl.n	8003e02 <__smakebuf_r+0x1c>
 8003df2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003df6:	6023      	str	r3, [r4, #0]
 8003df8:	6123      	str	r3, [r4, #16]
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	6163      	str	r3, [r4, #20]
 8003dfe:	b003      	add	sp, #12
 8003e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e02:	466a      	mov	r2, sp
 8003e04:	ab01      	add	r3, sp, #4
 8003e06:	f7ff ffc9 	bl	8003d9c <__swhatbuf_r>
 8003e0a:	9f00      	ldr	r7, [sp, #0]
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	4639      	mov	r1, r7
 8003e10:	4630      	mov	r0, r6
 8003e12:	f7ff fb0b 	bl	800342c <_malloc_r>
 8003e16:	b948      	cbnz	r0, 8003e2c <__smakebuf_r+0x46>
 8003e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e1c:	059a      	lsls	r2, r3, #22
 8003e1e:	d4ee      	bmi.n	8003dfe <__smakebuf_r+0x18>
 8003e20:	f023 0303 	bic.w	r3, r3, #3
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	81a3      	strh	r3, [r4, #12]
 8003e2a:	e7e2      	b.n	8003df2 <__smakebuf_r+0xc>
 8003e2c:	89a3      	ldrh	r3, [r4, #12]
 8003e2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	9b01      	ldr	r3, [sp, #4]
 8003e3a:	6020      	str	r0, [r4, #0]
 8003e3c:	b15b      	cbz	r3, 8003e56 <__smakebuf_r+0x70>
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e44:	f000 f81e 	bl	8003e84 <_isatty_r>
 8003e48:	b128      	cbz	r0, 8003e56 <__smakebuf_r+0x70>
 8003e4a:	89a3      	ldrh	r3, [r4, #12]
 8003e4c:	f023 0303 	bic.w	r3, r3, #3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	81a3      	strh	r3, [r4, #12]
 8003e56:	89a3      	ldrh	r3, [r4, #12]
 8003e58:	431d      	orrs	r5, r3
 8003e5a:	81a5      	strh	r5, [r4, #12]
 8003e5c:	e7cf      	b.n	8003dfe <__smakebuf_r+0x18>
	...

08003e60 <_fstat_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	2300      	movs	r3, #0
 8003e64:	4d06      	ldr	r5, [pc, #24]	@ (8003e80 <_fstat_r+0x20>)
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	602b      	str	r3, [r5, #0]
 8003e6e:	f7fd fa21 	bl	80012b4 <_fstat>
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	d102      	bne.n	8003e7c <_fstat_r+0x1c>
 8003e76:	682b      	ldr	r3, [r5, #0]
 8003e78:	b103      	cbz	r3, 8003e7c <_fstat_r+0x1c>
 8003e7a:	6023      	str	r3, [r4, #0]
 8003e7c:	bd38      	pop	{r3, r4, r5, pc}
 8003e7e:	bf00      	nop
 8003e80:	2000026c 	.word	0x2000026c

08003e84 <_isatty_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	2300      	movs	r3, #0
 8003e88:	4d05      	ldr	r5, [pc, #20]	@ (8003ea0 <_isatty_r+0x1c>)
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	602b      	str	r3, [r5, #0]
 8003e90:	f7fd fa1f 	bl	80012d2 <_isatty>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_isatty_r+0x1a>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_isatty_r+0x1a>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	2000026c 	.word	0x2000026c

08003ea4 <_init>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr

08003eb0 <_fini>:
 8003eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eb2:	bf00      	nop
 8003eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb6:	bc08      	pop	{r3}
 8003eb8:	469e      	mov	lr, r3
 8003eba:	4770      	bx	lr
